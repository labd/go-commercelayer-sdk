/*
Commerce Layer API

Headless Commerce for Global Brands.

API version: 7.6.1
Contact: support@commercelayer.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// PaymentOptionsApiService PaymentOptionsApi service
type PaymentOptionsApiService service

type PaymentOptionsApiDELETEPaymentOptionsPaymentOptionIdRequest struct {
	ctx             context.Context
	ApiService      *PaymentOptionsApiService
	paymentOptionId interface{}
}

func (r PaymentOptionsApiDELETEPaymentOptionsPaymentOptionIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DELETEPaymentOptionsPaymentOptionIdExecute(r)
}

/*
DELETEPaymentOptionsPaymentOptionId Delete a payment option

Delete a payment option

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param paymentOptionId The resource's id
	@return PaymentOptionsApiDELETEPaymentOptionsPaymentOptionIdRequest
*/
func (a *PaymentOptionsApiService) DELETEPaymentOptionsPaymentOptionId(ctx context.Context, paymentOptionId interface{}) PaymentOptionsApiDELETEPaymentOptionsPaymentOptionIdRequest {
	return PaymentOptionsApiDELETEPaymentOptionsPaymentOptionIdRequest{
		ApiService:      a,
		ctx:             ctx,
		paymentOptionId: paymentOptionId,
	}
}

// Execute executes the request
func (a *PaymentOptionsApiService) DELETEPaymentOptionsPaymentOptionIdExecute(r PaymentOptionsApiDELETEPaymentOptionsPaymentOptionIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentOptionsApiService.DELETEPaymentOptionsPaymentOptionId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/payment_options/{paymentOptionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"paymentOptionId"+"}", url.PathEscape(parameterValueToString(r.paymentOptionId, "paymentOptionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PaymentOptionsApiGETOrderIdPaymentOptionsRequest struct {
	ctx        context.Context
	ApiService *PaymentOptionsApiService
	orderId    interface{}
}

func (r PaymentOptionsApiGETOrderIdPaymentOptionsRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETOrderIdPaymentOptionsExecute(r)
}

/*
GETOrderIdPaymentOptions Retrieve the payment options associated to the order

Retrieve the payment options associated to the order

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param orderId The resource's id
	@return PaymentOptionsApiGETOrderIdPaymentOptionsRequest
*/
func (a *PaymentOptionsApiService) GETOrderIdPaymentOptions(ctx context.Context, orderId interface{}) PaymentOptionsApiGETOrderIdPaymentOptionsRequest {
	return PaymentOptionsApiGETOrderIdPaymentOptionsRequest{
		ApiService: a,
		ctx:        ctx,
		orderId:    orderId,
	}
}

// Execute executes the request
func (a *PaymentOptionsApiService) GETOrderIdPaymentOptionsExecute(r PaymentOptionsApiGETOrderIdPaymentOptionsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentOptionsApiService.GETOrderIdPaymentOptions")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/orders/{orderId}/payment_options"
	localVarPath = strings.Replace(localVarPath, "{"+"orderId"+"}", url.PathEscape(parameterValueToString(r.orderId, "orderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PaymentOptionsApiGETPaymentOptionsRequest struct {
	ctx        context.Context
	ApiService *PaymentOptionsApiService
}

func (r PaymentOptionsApiGETPaymentOptionsRequest) Execute() (*GETPaymentOptions200Response, *http.Response, error) {
	return r.ApiService.GETPaymentOptionsExecute(r)
}

/*
GETPaymentOptions List all payment options

List all payment options

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return PaymentOptionsApiGETPaymentOptionsRequest
*/
func (a *PaymentOptionsApiService) GETPaymentOptions(ctx context.Context) PaymentOptionsApiGETPaymentOptionsRequest {
	return PaymentOptionsApiGETPaymentOptionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return GETPaymentOptions200Response
func (a *PaymentOptionsApiService) GETPaymentOptionsExecute(r PaymentOptionsApiGETPaymentOptionsRequest) (*GETPaymentOptions200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GETPaymentOptions200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentOptionsApiService.GETPaymentOptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/payment_options"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PaymentOptionsApiGETPaymentOptionsPaymentOptionIdRequest struct {
	ctx             context.Context
	ApiService      *PaymentOptionsApiService
	paymentOptionId interface{}
}

func (r PaymentOptionsApiGETPaymentOptionsPaymentOptionIdRequest) Execute() (*GETPaymentOptionsPaymentOptionId200Response, *http.Response, error) {
	return r.ApiService.GETPaymentOptionsPaymentOptionIdExecute(r)
}

/*
GETPaymentOptionsPaymentOptionId Retrieve a payment option

Retrieve a payment option

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param paymentOptionId The resource's id
	@return PaymentOptionsApiGETPaymentOptionsPaymentOptionIdRequest
*/
func (a *PaymentOptionsApiService) GETPaymentOptionsPaymentOptionId(ctx context.Context, paymentOptionId interface{}) PaymentOptionsApiGETPaymentOptionsPaymentOptionIdRequest {
	return PaymentOptionsApiGETPaymentOptionsPaymentOptionIdRequest{
		ApiService:      a,
		ctx:             ctx,
		paymentOptionId: paymentOptionId,
	}
}

// Execute executes the request
//
//	@return GETPaymentOptionsPaymentOptionId200Response
func (a *PaymentOptionsApiService) GETPaymentOptionsPaymentOptionIdExecute(r PaymentOptionsApiGETPaymentOptionsPaymentOptionIdRequest) (*GETPaymentOptionsPaymentOptionId200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GETPaymentOptionsPaymentOptionId200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentOptionsApiService.GETPaymentOptionsPaymentOptionId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/payment_options/{paymentOptionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"paymentOptionId"+"}", url.PathEscape(parameterValueToString(r.paymentOptionId, "paymentOptionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PaymentOptionsApiPATCHPaymentOptionsPaymentOptionIdRequest struct {
	ctx                 context.Context
	ApiService          *PaymentOptionsApiService
	paymentOptionUpdate *PaymentOptionUpdate
	paymentOptionId     interface{}
}

func (r PaymentOptionsApiPATCHPaymentOptionsPaymentOptionIdRequest) PaymentOptionUpdate(paymentOptionUpdate PaymentOptionUpdate) PaymentOptionsApiPATCHPaymentOptionsPaymentOptionIdRequest {
	r.paymentOptionUpdate = &paymentOptionUpdate
	return r
}

func (r PaymentOptionsApiPATCHPaymentOptionsPaymentOptionIdRequest) Execute() (*PATCHPaymentOptionsPaymentOptionId200Response, *http.Response, error) {
	return r.ApiService.PATCHPaymentOptionsPaymentOptionIdExecute(r)
}

/*
PATCHPaymentOptionsPaymentOptionId Update a payment option

Update a payment option

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param paymentOptionId The resource's id
	@return PaymentOptionsApiPATCHPaymentOptionsPaymentOptionIdRequest
*/
func (a *PaymentOptionsApiService) PATCHPaymentOptionsPaymentOptionId(ctx context.Context, paymentOptionId interface{}) PaymentOptionsApiPATCHPaymentOptionsPaymentOptionIdRequest {
	return PaymentOptionsApiPATCHPaymentOptionsPaymentOptionIdRequest{
		ApiService:      a,
		ctx:             ctx,
		paymentOptionId: paymentOptionId,
	}
}

// Execute executes the request
//
//	@return PATCHPaymentOptionsPaymentOptionId200Response
func (a *PaymentOptionsApiService) PATCHPaymentOptionsPaymentOptionIdExecute(r PaymentOptionsApiPATCHPaymentOptionsPaymentOptionIdRequest) (*PATCHPaymentOptionsPaymentOptionId200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PATCHPaymentOptionsPaymentOptionId200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentOptionsApiService.PATCHPaymentOptionsPaymentOptionId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/payment_options/{paymentOptionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"paymentOptionId"+"}", url.PathEscape(parameterValueToString(r.paymentOptionId, "paymentOptionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.paymentOptionUpdate == nil {
		return localVarReturnValue, nil, reportError("paymentOptionUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.paymentOptionUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PaymentOptionsApiPOSTPaymentOptionsRequest struct {
	ctx                 context.Context
	ApiService          *PaymentOptionsApiService
	paymentOptionCreate *PaymentOptionCreate
}

func (r PaymentOptionsApiPOSTPaymentOptionsRequest) PaymentOptionCreate(paymentOptionCreate PaymentOptionCreate) PaymentOptionsApiPOSTPaymentOptionsRequest {
	r.paymentOptionCreate = &paymentOptionCreate
	return r
}

func (r PaymentOptionsApiPOSTPaymentOptionsRequest) Execute() (*POSTPaymentOptions201Response, *http.Response, error) {
	return r.ApiService.POSTPaymentOptionsExecute(r)
}

/*
POSTPaymentOptions Create a payment option

Create a payment option

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return PaymentOptionsApiPOSTPaymentOptionsRequest
*/
func (a *PaymentOptionsApiService) POSTPaymentOptions(ctx context.Context) PaymentOptionsApiPOSTPaymentOptionsRequest {
	return PaymentOptionsApiPOSTPaymentOptionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return POSTPaymentOptions201Response
func (a *PaymentOptionsApiService) POSTPaymentOptionsExecute(r PaymentOptionsApiPOSTPaymentOptionsRequest) (*POSTPaymentOptions201Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *POSTPaymentOptions201Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentOptionsApiService.POSTPaymentOptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/payment_options"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.paymentOptionCreate == nil {
		return localVarReturnValue, nil, reportError("paymentOptionCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.paymentOptionCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
