/*
Commerce Layer API

Headless Commerce for Global Brands.

API version: 7.6.1
Contact: support@commercelayer.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the SubscriptionModelUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionModelUpdate{}

// SubscriptionModelUpdate struct for SubscriptionModelUpdate
type SubscriptionModelUpdate struct {
	Data SubscriptionModelUpdateData `json:"data"`
}

// NewSubscriptionModelUpdate instantiates a new SubscriptionModelUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionModelUpdate(data SubscriptionModelUpdateData) *SubscriptionModelUpdate {
	this := SubscriptionModelUpdate{}
	this.Data = data
	return &this
}

// NewSubscriptionModelUpdateWithDefaults instantiates a new SubscriptionModelUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionModelUpdateWithDefaults() *SubscriptionModelUpdate {
	this := SubscriptionModelUpdate{}
	return &this
}

// GetData returns the Data field value
func (o *SubscriptionModelUpdate) GetData() SubscriptionModelUpdateData {
	if o == nil {
		var ret SubscriptionModelUpdateData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *SubscriptionModelUpdate) GetDataOk() (*SubscriptionModelUpdateData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *SubscriptionModelUpdate) SetData(v SubscriptionModelUpdateData) {
	o.Data = v
}

func (o SubscriptionModelUpdate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionModelUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

type NullableSubscriptionModelUpdate struct {
	value *SubscriptionModelUpdate
	isSet bool
}

func (v NullableSubscriptionModelUpdate) Get() *SubscriptionModelUpdate {
	return v.value
}

func (v *NullableSubscriptionModelUpdate) Set(val *SubscriptionModelUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionModelUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionModelUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionModelUpdate(val *SubscriptionModelUpdate) *NullableSubscriptionModelUpdate {
	return &NullableSubscriptionModelUpdate{value: val, isSet: true}
}

func (v NullableSubscriptionModelUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionModelUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
