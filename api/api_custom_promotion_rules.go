/*
Commerce Layer API

Headless Commerce for Global Brands.

API version: 7.6.1
Contact: support@commercelayer.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// CustomPromotionRulesApiService CustomPromotionRulesApi service
type CustomPromotionRulesApiService service

type CustomPromotionRulesApiDELETECustomPromotionRulesCustomPromotionRuleIdRequest struct {
	ctx                   context.Context
	ApiService            *CustomPromotionRulesApiService
	customPromotionRuleId interface{}
}

func (r CustomPromotionRulesApiDELETECustomPromotionRulesCustomPromotionRuleIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DELETECustomPromotionRulesCustomPromotionRuleIdExecute(r)
}

/*
DELETECustomPromotionRulesCustomPromotionRuleId Delete a custom promotion rule

Delete a custom promotion rule

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customPromotionRuleId The resource's id
	@return CustomPromotionRulesApiDELETECustomPromotionRulesCustomPromotionRuleIdRequest
*/
func (a *CustomPromotionRulesApiService) DELETECustomPromotionRulesCustomPromotionRuleId(ctx context.Context, customPromotionRuleId interface{}) CustomPromotionRulesApiDELETECustomPromotionRulesCustomPromotionRuleIdRequest {
	return CustomPromotionRulesApiDELETECustomPromotionRulesCustomPromotionRuleIdRequest{
		ApiService:            a,
		ctx:                   ctx,
		customPromotionRuleId: customPromotionRuleId,
	}
}

// Execute executes the request
func (a *CustomPromotionRulesApiService) DELETECustomPromotionRulesCustomPromotionRuleIdExecute(r CustomPromotionRulesApiDELETECustomPromotionRulesCustomPromotionRuleIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomPromotionRulesApiService.DELETECustomPromotionRulesCustomPromotionRuleId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/custom_promotion_rules/{customPromotionRuleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"customPromotionRuleId"+"}", url.PathEscape(parameterValueToString(r.customPromotionRuleId, "customPromotionRuleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type CustomPromotionRulesApiGETBuyXPayYPromotionIdCustomPromotionRuleRequest struct {
	ctx                 context.Context
	ApiService          *CustomPromotionRulesApiService
	buyXPayYPromotionId interface{}
}

func (r CustomPromotionRulesApiGETBuyXPayYPromotionIdCustomPromotionRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETBuyXPayYPromotionIdCustomPromotionRuleExecute(r)
}

/*
GETBuyXPayYPromotionIdCustomPromotionRule Retrieve the custom promotion rule associated to the buy x pay y promotion

Retrieve the custom promotion rule associated to the buy x pay y promotion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param buyXPayYPromotionId The resource's id
	@return CustomPromotionRulesApiGETBuyXPayYPromotionIdCustomPromotionRuleRequest
*/
func (a *CustomPromotionRulesApiService) GETBuyXPayYPromotionIdCustomPromotionRule(ctx context.Context, buyXPayYPromotionId interface{}) CustomPromotionRulesApiGETBuyXPayYPromotionIdCustomPromotionRuleRequest {
	return CustomPromotionRulesApiGETBuyXPayYPromotionIdCustomPromotionRuleRequest{
		ApiService:          a,
		ctx:                 ctx,
		buyXPayYPromotionId: buyXPayYPromotionId,
	}
}

// Execute executes the request
func (a *CustomPromotionRulesApiService) GETBuyXPayYPromotionIdCustomPromotionRuleExecute(r CustomPromotionRulesApiGETBuyXPayYPromotionIdCustomPromotionRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomPromotionRulesApiService.GETBuyXPayYPromotionIdCustomPromotionRule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/buy_x_pay_y_promotions/{buyXPayYPromotionId}/custom_promotion_rule"
	localVarPath = strings.Replace(localVarPath, "{"+"buyXPayYPromotionId"+"}", url.PathEscape(parameterValueToString(r.buyXPayYPromotionId, "buyXPayYPromotionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type CustomPromotionRulesApiGETCustomPromotionRulesRequest struct {
	ctx        context.Context
	ApiService *CustomPromotionRulesApiService
}

func (r CustomPromotionRulesApiGETCustomPromotionRulesRequest) Execute() (*GETCustomPromotionRules200Response, *http.Response, error) {
	return r.ApiService.GETCustomPromotionRulesExecute(r)
}

/*
GETCustomPromotionRules List all custom promotion rules

List all custom promotion rules

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return CustomPromotionRulesApiGETCustomPromotionRulesRequest
*/
func (a *CustomPromotionRulesApiService) GETCustomPromotionRules(ctx context.Context) CustomPromotionRulesApiGETCustomPromotionRulesRequest {
	return CustomPromotionRulesApiGETCustomPromotionRulesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return GETCustomPromotionRules200Response
func (a *CustomPromotionRulesApiService) GETCustomPromotionRulesExecute(r CustomPromotionRulesApiGETCustomPromotionRulesRequest) (*GETCustomPromotionRules200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GETCustomPromotionRules200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomPromotionRulesApiService.GETCustomPromotionRules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/custom_promotion_rules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CustomPromotionRulesApiGETCustomPromotionRulesCustomPromotionRuleIdRequest struct {
	ctx                   context.Context
	ApiService            *CustomPromotionRulesApiService
	customPromotionRuleId interface{}
}

func (r CustomPromotionRulesApiGETCustomPromotionRulesCustomPromotionRuleIdRequest) Execute() (*GETCustomPromotionRulesCustomPromotionRuleId200Response, *http.Response, error) {
	return r.ApiService.GETCustomPromotionRulesCustomPromotionRuleIdExecute(r)
}

/*
GETCustomPromotionRulesCustomPromotionRuleId Retrieve a custom promotion rule

Retrieve a custom promotion rule

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customPromotionRuleId The resource's id
	@return CustomPromotionRulesApiGETCustomPromotionRulesCustomPromotionRuleIdRequest
*/
func (a *CustomPromotionRulesApiService) GETCustomPromotionRulesCustomPromotionRuleId(ctx context.Context, customPromotionRuleId interface{}) CustomPromotionRulesApiGETCustomPromotionRulesCustomPromotionRuleIdRequest {
	return CustomPromotionRulesApiGETCustomPromotionRulesCustomPromotionRuleIdRequest{
		ApiService:            a,
		ctx:                   ctx,
		customPromotionRuleId: customPromotionRuleId,
	}
}

// Execute executes the request
//
//	@return GETCustomPromotionRulesCustomPromotionRuleId200Response
func (a *CustomPromotionRulesApiService) GETCustomPromotionRulesCustomPromotionRuleIdExecute(r CustomPromotionRulesApiGETCustomPromotionRulesCustomPromotionRuleIdRequest) (*GETCustomPromotionRulesCustomPromotionRuleId200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GETCustomPromotionRulesCustomPromotionRuleId200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomPromotionRulesApiService.GETCustomPromotionRulesCustomPromotionRuleId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/custom_promotion_rules/{customPromotionRuleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"customPromotionRuleId"+"}", url.PathEscape(parameterValueToString(r.customPromotionRuleId, "customPromotionRuleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CustomPromotionRulesApiGETExternalPromotionIdCustomPromotionRuleRequest struct {
	ctx                 context.Context
	ApiService          *CustomPromotionRulesApiService
	externalPromotionId interface{}
}

func (r CustomPromotionRulesApiGETExternalPromotionIdCustomPromotionRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETExternalPromotionIdCustomPromotionRuleExecute(r)
}

/*
GETExternalPromotionIdCustomPromotionRule Retrieve the custom promotion rule associated to the external promotion

Retrieve the custom promotion rule associated to the external promotion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param externalPromotionId The resource's id
	@return CustomPromotionRulesApiGETExternalPromotionIdCustomPromotionRuleRequest
*/
func (a *CustomPromotionRulesApiService) GETExternalPromotionIdCustomPromotionRule(ctx context.Context, externalPromotionId interface{}) CustomPromotionRulesApiGETExternalPromotionIdCustomPromotionRuleRequest {
	return CustomPromotionRulesApiGETExternalPromotionIdCustomPromotionRuleRequest{
		ApiService:          a,
		ctx:                 ctx,
		externalPromotionId: externalPromotionId,
	}
}

// Execute executes the request
func (a *CustomPromotionRulesApiService) GETExternalPromotionIdCustomPromotionRuleExecute(r CustomPromotionRulesApiGETExternalPromotionIdCustomPromotionRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomPromotionRulesApiService.GETExternalPromotionIdCustomPromotionRule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/external_promotions/{externalPromotionId}/custom_promotion_rule"
	localVarPath = strings.Replace(localVarPath, "{"+"externalPromotionId"+"}", url.PathEscape(parameterValueToString(r.externalPromotionId, "externalPromotionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type CustomPromotionRulesApiGETFixedAmountPromotionIdCustomPromotionRuleRequest struct {
	ctx                    context.Context
	ApiService             *CustomPromotionRulesApiService
	fixedAmountPromotionId interface{}
}

func (r CustomPromotionRulesApiGETFixedAmountPromotionIdCustomPromotionRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETFixedAmountPromotionIdCustomPromotionRuleExecute(r)
}

/*
GETFixedAmountPromotionIdCustomPromotionRule Retrieve the custom promotion rule associated to the fixed amount promotion

Retrieve the custom promotion rule associated to the fixed amount promotion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param fixedAmountPromotionId The resource's id
	@return CustomPromotionRulesApiGETFixedAmountPromotionIdCustomPromotionRuleRequest
*/
func (a *CustomPromotionRulesApiService) GETFixedAmountPromotionIdCustomPromotionRule(ctx context.Context, fixedAmountPromotionId interface{}) CustomPromotionRulesApiGETFixedAmountPromotionIdCustomPromotionRuleRequest {
	return CustomPromotionRulesApiGETFixedAmountPromotionIdCustomPromotionRuleRequest{
		ApiService:             a,
		ctx:                    ctx,
		fixedAmountPromotionId: fixedAmountPromotionId,
	}
}

// Execute executes the request
func (a *CustomPromotionRulesApiService) GETFixedAmountPromotionIdCustomPromotionRuleExecute(r CustomPromotionRulesApiGETFixedAmountPromotionIdCustomPromotionRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomPromotionRulesApiService.GETFixedAmountPromotionIdCustomPromotionRule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fixed_amount_promotions/{fixedAmountPromotionId}/custom_promotion_rule"
	localVarPath = strings.Replace(localVarPath, "{"+"fixedAmountPromotionId"+"}", url.PathEscape(parameterValueToString(r.fixedAmountPromotionId, "fixedAmountPromotionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type CustomPromotionRulesApiGETFixedPricePromotionIdCustomPromotionRuleRequest struct {
	ctx                   context.Context
	ApiService            *CustomPromotionRulesApiService
	fixedPricePromotionId interface{}
}

func (r CustomPromotionRulesApiGETFixedPricePromotionIdCustomPromotionRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETFixedPricePromotionIdCustomPromotionRuleExecute(r)
}

/*
GETFixedPricePromotionIdCustomPromotionRule Retrieve the custom promotion rule associated to the fixed price promotion

Retrieve the custom promotion rule associated to the fixed price promotion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param fixedPricePromotionId The resource's id
	@return CustomPromotionRulesApiGETFixedPricePromotionIdCustomPromotionRuleRequest
*/
func (a *CustomPromotionRulesApiService) GETFixedPricePromotionIdCustomPromotionRule(ctx context.Context, fixedPricePromotionId interface{}) CustomPromotionRulesApiGETFixedPricePromotionIdCustomPromotionRuleRequest {
	return CustomPromotionRulesApiGETFixedPricePromotionIdCustomPromotionRuleRequest{
		ApiService:            a,
		ctx:                   ctx,
		fixedPricePromotionId: fixedPricePromotionId,
	}
}

// Execute executes the request
func (a *CustomPromotionRulesApiService) GETFixedPricePromotionIdCustomPromotionRuleExecute(r CustomPromotionRulesApiGETFixedPricePromotionIdCustomPromotionRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomPromotionRulesApiService.GETFixedPricePromotionIdCustomPromotionRule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fixed_price_promotions/{fixedPricePromotionId}/custom_promotion_rule"
	localVarPath = strings.Replace(localVarPath, "{"+"fixedPricePromotionId"+"}", url.PathEscape(parameterValueToString(r.fixedPricePromotionId, "fixedPricePromotionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type CustomPromotionRulesApiGETFreeGiftPromotionIdCustomPromotionRuleRequest struct {
	ctx                 context.Context
	ApiService          *CustomPromotionRulesApiService
	freeGiftPromotionId interface{}
}

func (r CustomPromotionRulesApiGETFreeGiftPromotionIdCustomPromotionRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETFreeGiftPromotionIdCustomPromotionRuleExecute(r)
}

/*
GETFreeGiftPromotionIdCustomPromotionRule Retrieve the custom promotion rule associated to the free gift promotion

Retrieve the custom promotion rule associated to the free gift promotion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param freeGiftPromotionId The resource's id
	@return CustomPromotionRulesApiGETFreeGiftPromotionIdCustomPromotionRuleRequest
*/
func (a *CustomPromotionRulesApiService) GETFreeGiftPromotionIdCustomPromotionRule(ctx context.Context, freeGiftPromotionId interface{}) CustomPromotionRulesApiGETFreeGiftPromotionIdCustomPromotionRuleRequest {
	return CustomPromotionRulesApiGETFreeGiftPromotionIdCustomPromotionRuleRequest{
		ApiService:          a,
		ctx:                 ctx,
		freeGiftPromotionId: freeGiftPromotionId,
	}
}

// Execute executes the request
func (a *CustomPromotionRulesApiService) GETFreeGiftPromotionIdCustomPromotionRuleExecute(r CustomPromotionRulesApiGETFreeGiftPromotionIdCustomPromotionRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomPromotionRulesApiService.GETFreeGiftPromotionIdCustomPromotionRule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/free_gift_promotions/{freeGiftPromotionId}/custom_promotion_rule"
	localVarPath = strings.Replace(localVarPath, "{"+"freeGiftPromotionId"+"}", url.PathEscape(parameterValueToString(r.freeGiftPromotionId, "freeGiftPromotionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type CustomPromotionRulesApiGETFreeShippingPromotionIdCustomPromotionRuleRequest struct {
	ctx                     context.Context
	ApiService              *CustomPromotionRulesApiService
	freeShippingPromotionId interface{}
}

func (r CustomPromotionRulesApiGETFreeShippingPromotionIdCustomPromotionRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETFreeShippingPromotionIdCustomPromotionRuleExecute(r)
}

/*
GETFreeShippingPromotionIdCustomPromotionRule Retrieve the custom promotion rule associated to the free shipping promotion

Retrieve the custom promotion rule associated to the free shipping promotion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param freeShippingPromotionId The resource's id
	@return CustomPromotionRulesApiGETFreeShippingPromotionIdCustomPromotionRuleRequest
*/
func (a *CustomPromotionRulesApiService) GETFreeShippingPromotionIdCustomPromotionRule(ctx context.Context, freeShippingPromotionId interface{}) CustomPromotionRulesApiGETFreeShippingPromotionIdCustomPromotionRuleRequest {
	return CustomPromotionRulesApiGETFreeShippingPromotionIdCustomPromotionRuleRequest{
		ApiService:              a,
		ctx:                     ctx,
		freeShippingPromotionId: freeShippingPromotionId,
	}
}

// Execute executes the request
func (a *CustomPromotionRulesApiService) GETFreeShippingPromotionIdCustomPromotionRuleExecute(r CustomPromotionRulesApiGETFreeShippingPromotionIdCustomPromotionRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomPromotionRulesApiService.GETFreeShippingPromotionIdCustomPromotionRule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/free_shipping_promotions/{freeShippingPromotionId}/custom_promotion_rule"
	localVarPath = strings.Replace(localVarPath, "{"+"freeShippingPromotionId"+"}", url.PathEscape(parameterValueToString(r.freeShippingPromotionId, "freeShippingPromotionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type CustomPromotionRulesApiGETPercentageDiscountPromotionIdCustomPromotionRuleRequest struct {
	ctx                           context.Context
	ApiService                    *CustomPromotionRulesApiService
	percentageDiscountPromotionId interface{}
}

func (r CustomPromotionRulesApiGETPercentageDiscountPromotionIdCustomPromotionRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETPercentageDiscountPromotionIdCustomPromotionRuleExecute(r)
}

/*
GETPercentageDiscountPromotionIdCustomPromotionRule Retrieve the custom promotion rule associated to the percentage discount promotion

Retrieve the custom promotion rule associated to the percentage discount promotion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param percentageDiscountPromotionId The resource's id
	@return CustomPromotionRulesApiGETPercentageDiscountPromotionIdCustomPromotionRuleRequest
*/
func (a *CustomPromotionRulesApiService) GETPercentageDiscountPromotionIdCustomPromotionRule(ctx context.Context, percentageDiscountPromotionId interface{}) CustomPromotionRulesApiGETPercentageDiscountPromotionIdCustomPromotionRuleRequest {
	return CustomPromotionRulesApiGETPercentageDiscountPromotionIdCustomPromotionRuleRequest{
		ApiService:                    a,
		ctx:                           ctx,
		percentageDiscountPromotionId: percentageDiscountPromotionId,
	}
}

// Execute executes the request
func (a *CustomPromotionRulesApiService) GETPercentageDiscountPromotionIdCustomPromotionRuleExecute(r CustomPromotionRulesApiGETPercentageDiscountPromotionIdCustomPromotionRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomPromotionRulesApiService.GETPercentageDiscountPromotionIdCustomPromotionRule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/percentage_discount_promotions/{percentageDiscountPromotionId}/custom_promotion_rule"
	localVarPath = strings.Replace(localVarPath, "{"+"percentageDiscountPromotionId"+"}", url.PathEscape(parameterValueToString(r.percentageDiscountPromotionId, "percentageDiscountPromotionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type CustomPromotionRulesApiGETPromotionIdCustomPromotionRuleRequest struct {
	ctx         context.Context
	ApiService  *CustomPromotionRulesApiService
	promotionId interface{}
}

func (r CustomPromotionRulesApiGETPromotionIdCustomPromotionRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETPromotionIdCustomPromotionRuleExecute(r)
}

/*
GETPromotionIdCustomPromotionRule Retrieve the custom promotion rule associated to the promotion

Retrieve the custom promotion rule associated to the promotion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param promotionId The resource's id
	@return CustomPromotionRulesApiGETPromotionIdCustomPromotionRuleRequest
*/
func (a *CustomPromotionRulesApiService) GETPromotionIdCustomPromotionRule(ctx context.Context, promotionId interface{}) CustomPromotionRulesApiGETPromotionIdCustomPromotionRuleRequest {
	return CustomPromotionRulesApiGETPromotionIdCustomPromotionRuleRequest{
		ApiService:  a,
		ctx:         ctx,
		promotionId: promotionId,
	}
}

// Execute executes the request
func (a *CustomPromotionRulesApiService) GETPromotionIdCustomPromotionRuleExecute(r CustomPromotionRulesApiGETPromotionIdCustomPromotionRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomPromotionRulesApiService.GETPromotionIdCustomPromotionRule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/promotions/{promotionId}/custom_promotion_rule"
	localVarPath = strings.Replace(localVarPath, "{"+"promotionId"+"}", url.PathEscape(parameterValueToString(r.promotionId, "promotionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type CustomPromotionRulesApiPATCHCustomPromotionRulesCustomPromotionRuleIdRequest struct {
	ctx                       context.Context
	ApiService                *CustomPromotionRulesApiService
	customPromotionRuleUpdate *CustomPromotionRuleUpdate
	customPromotionRuleId     interface{}
}

func (r CustomPromotionRulesApiPATCHCustomPromotionRulesCustomPromotionRuleIdRequest) CustomPromotionRuleUpdate(customPromotionRuleUpdate CustomPromotionRuleUpdate) CustomPromotionRulesApiPATCHCustomPromotionRulesCustomPromotionRuleIdRequest {
	r.customPromotionRuleUpdate = &customPromotionRuleUpdate
	return r
}

func (r CustomPromotionRulesApiPATCHCustomPromotionRulesCustomPromotionRuleIdRequest) Execute() (*PATCHCustomPromotionRulesCustomPromotionRuleId200Response, *http.Response, error) {
	return r.ApiService.PATCHCustomPromotionRulesCustomPromotionRuleIdExecute(r)
}

/*
PATCHCustomPromotionRulesCustomPromotionRuleId Update a custom promotion rule

Update a custom promotion rule

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param customPromotionRuleId The resource's id
	@return CustomPromotionRulesApiPATCHCustomPromotionRulesCustomPromotionRuleIdRequest
*/
func (a *CustomPromotionRulesApiService) PATCHCustomPromotionRulesCustomPromotionRuleId(ctx context.Context, customPromotionRuleId interface{}) CustomPromotionRulesApiPATCHCustomPromotionRulesCustomPromotionRuleIdRequest {
	return CustomPromotionRulesApiPATCHCustomPromotionRulesCustomPromotionRuleIdRequest{
		ApiService:            a,
		ctx:                   ctx,
		customPromotionRuleId: customPromotionRuleId,
	}
}

// Execute executes the request
//
//	@return PATCHCustomPromotionRulesCustomPromotionRuleId200Response
func (a *CustomPromotionRulesApiService) PATCHCustomPromotionRulesCustomPromotionRuleIdExecute(r CustomPromotionRulesApiPATCHCustomPromotionRulesCustomPromotionRuleIdRequest) (*PATCHCustomPromotionRulesCustomPromotionRuleId200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PATCHCustomPromotionRulesCustomPromotionRuleId200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomPromotionRulesApiService.PATCHCustomPromotionRulesCustomPromotionRuleId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/custom_promotion_rules/{customPromotionRuleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"customPromotionRuleId"+"}", url.PathEscape(parameterValueToString(r.customPromotionRuleId, "customPromotionRuleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.customPromotionRuleUpdate == nil {
		return localVarReturnValue, nil, reportError("customPromotionRuleUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customPromotionRuleUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CustomPromotionRulesApiPOSTCustomPromotionRulesRequest struct {
	ctx                       context.Context
	ApiService                *CustomPromotionRulesApiService
	customPromotionRuleCreate *CustomPromotionRuleCreate
}

func (r CustomPromotionRulesApiPOSTCustomPromotionRulesRequest) CustomPromotionRuleCreate(customPromotionRuleCreate CustomPromotionRuleCreate) CustomPromotionRulesApiPOSTCustomPromotionRulesRequest {
	r.customPromotionRuleCreate = &customPromotionRuleCreate
	return r
}

func (r CustomPromotionRulesApiPOSTCustomPromotionRulesRequest) Execute() (*POSTCustomPromotionRules201Response, *http.Response, error) {
	return r.ApiService.POSTCustomPromotionRulesExecute(r)
}

/*
POSTCustomPromotionRules Create a custom promotion rule

Create a custom promotion rule

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return CustomPromotionRulesApiPOSTCustomPromotionRulesRequest
*/
func (a *CustomPromotionRulesApiService) POSTCustomPromotionRules(ctx context.Context) CustomPromotionRulesApiPOSTCustomPromotionRulesRequest {
	return CustomPromotionRulesApiPOSTCustomPromotionRulesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return POSTCustomPromotionRules201Response
func (a *CustomPromotionRulesApiService) POSTCustomPromotionRulesExecute(r CustomPromotionRulesApiPOSTCustomPromotionRulesRequest) (*POSTCustomPromotionRules201Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *POSTCustomPromotionRules201Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomPromotionRulesApiService.POSTCustomPromotionRules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/custom_promotion_rules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.customPromotionRuleCreate == nil {
		return localVarReturnValue, nil, reportError("customPromotionRuleCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customPromotionRuleCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
