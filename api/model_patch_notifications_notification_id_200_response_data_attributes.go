/*
Commerce Layer API

Headless Commerce for Global Brands.

API version: 7.6.1
Contact: support@commercelayer.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the PATCHNotificationsNotificationId200ResponseDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PATCHNotificationsNotificationId200ResponseDataAttributes{}

// PATCHNotificationsNotificationId200ResponseDataAttributes struct for PATCHNotificationsNotificationId200ResponseDataAttributes
type PATCHNotificationsNotificationId200ResponseDataAttributes struct {
	// The internal name of the notification.
	Name interface{} `json:"name,omitempty"`
	// Indicates if the notification is temporary, valid for the ones created by external services.
	Flash interface{} `json:"flash,omitempty"`
	// An internal body of the notification.
	Body interface{} `json:"body,omitempty"`
	// A string that you can use to add any external identifier to the resource. This can be useful for integrating the resource to an external system, like an ERP, a marketing tool, a CRM, or whatever.
	Reference interface{} `json:"reference,omitempty"`
	// Any identifier of the third party system that defines the reference code.
	ReferenceOrigin interface{} `json:"reference_origin,omitempty"`
	// Set of key-value pairs that you can attach to the resource. This can be useful for storing additional information about the resource in a structured format.
	Metadata interface{} `json:"metadata,omitempty"`
}

// NewPATCHNotificationsNotificationId200ResponseDataAttributes instantiates a new PATCHNotificationsNotificationId200ResponseDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPATCHNotificationsNotificationId200ResponseDataAttributes() *PATCHNotificationsNotificationId200ResponseDataAttributes {
	this := PATCHNotificationsNotificationId200ResponseDataAttributes{}
	return &this
}

// NewPATCHNotificationsNotificationId200ResponseDataAttributesWithDefaults instantiates a new PATCHNotificationsNotificationId200ResponseDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPATCHNotificationsNotificationId200ResponseDataAttributesWithDefaults() *PATCHNotificationsNotificationId200ResponseDataAttributes {
	this := PATCHNotificationsNotificationId200ResponseDataAttributes{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PATCHNotificationsNotificationId200ResponseDataAttributes) GetName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PATCHNotificationsNotificationId200ResponseDataAttributes) GetNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return &o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PATCHNotificationsNotificationId200ResponseDataAttributes) HasName() bool {
	if o != nil && IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given interface{} and assigns it to the Name field.
func (o *PATCHNotificationsNotificationId200ResponseDataAttributes) SetName(v interface{}) {
	o.Name = v
}

// GetFlash returns the Flash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PATCHNotificationsNotificationId200ResponseDataAttributes) GetFlash() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Flash
}

// GetFlashOk returns a tuple with the Flash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PATCHNotificationsNotificationId200ResponseDataAttributes) GetFlashOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Flash) {
		return nil, false
	}
	return &o.Flash, true
}

// HasFlash returns a boolean if a field has been set.
func (o *PATCHNotificationsNotificationId200ResponseDataAttributes) HasFlash() bool {
	if o != nil && IsNil(o.Flash) {
		return true
	}

	return false
}

// SetFlash gets a reference to the given interface{} and assigns it to the Flash field.
func (o *PATCHNotificationsNotificationId200ResponseDataAttributes) SetFlash(v interface{}) {
	o.Flash = v
}

// GetBody returns the Body field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PATCHNotificationsNotificationId200ResponseDataAttributes) GetBody() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PATCHNotificationsNotificationId200ResponseDataAttributes) GetBodyOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return &o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *PATCHNotificationsNotificationId200ResponseDataAttributes) HasBody() bool {
	if o != nil && IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given interface{} and assigns it to the Body field.
func (o *PATCHNotificationsNotificationId200ResponseDataAttributes) SetBody(v interface{}) {
	o.Body = v
}

// GetReference returns the Reference field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PATCHNotificationsNotificationId200ResponseDataAttributes) GetReference() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PATCHNotificationsNotificationId200ResponseDataAttributes) GetReferenceOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return &o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *PATCHNotificationsNotificationId200ResponseDataAttributes) HasReference() bool {
	if o != nil && IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given interface{} and assigns it to the Reference field.
func (o *PATCHNotificationsNotificationId200ResponseDataAttributes) SetReference(v interface{}) {
	o.Reference = v
}

// GetReferenceOrigin returns the ReferenceOrigin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PATCHNotificationsNotificationId200ResponseDataAttributes) GetReferenceOrigin() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ReferenceOrigin
}

// GetReferenceOriginOk returns a tuple with the ReferenceOrigin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PATCHNotificationsNotificationId200ResponseDataAttributes) GetReferenceOriginOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ReferenceOrigin) {
		return nil, false
	}
	return &o.ReferenceOrigin, true
}

// HasReferenceOrigin returns a boolean if a field has been set.
func (o *PATCHNotificationsNotificationId200ResponseDataAttributes) HasReferenceOrigin() bool {
	if o != nil && IsNil(o.ReferenceOrigin) {
		return true
	}

	return false
}

// SetReferenceOrigin gets a reference to the given interface{} and assigns it to the ReferenceOrigin field.
func (o *PATCHNotificationsNotificationId200ResponseDataAttributes) SetReferenceOrigin(v interface{}) {
	o.ReferenceOrigin = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PATCHNotificationsNotificationId200ResponseDataAttributes) GetMetadata() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PATCHNotificationsNotificationId200ResponseDataAttributes) GetMetadataOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return &o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *PATCHNotificationsNotificationId200ResponseDataAttributes) HasMetadata() bool {
	if o != nil && IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given interface{} and assigns it to the Metadata field.
func (o *PATCHNotificationsNotificationId200ResponseDataAttributes) SetMetadata(v interface{}) {
	o.Metadata = v
}

func (o PATCHNotificationsNotificationId200ResponseDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PATCHNotificationsNotificationId200ResponseDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Flash != nil {
		toSerialize["flash"] = o.Flash
	}
	if o.Body != nil {
		toSerialize["body"] = o.Body
	}
	if o.Reference != nil {
		toSerialize["reference"] = o.Reference
	}
	if o.ReferenceOrigin != nil {
		toSerialize["reference_origin"] = o.ReferenceOrigin
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullablePATCHNotificationsNotificationId200ResponseDataAttributes struct {
	value *PATCHNotificationsNotificationId200ResponseDataAttributes
	isSet bool
}

func (v NullablePATCHNotificationsNotificationId200ResponseDataAttributes) Get() *PATCHNotificationsNotificationId200ResponseDataAttributes {
	return v.value
}

func (v *NullablePATCHNotificationsNotificationId200ResponseDataAttributes) Set(val *PATCHNotificationsNotificationId200ResponseDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullablePATCHNotificationsNotificationId200ResponseDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullablePATCHNotificationsNotificationId200ResponseDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePATCHNotificationsNotificationId200ResponseDataAttributes(val *PATCHNotificationsNotificationId200ResponseDataAttributes) *NullablePATCHNotificationsNotificationId200ResponseDataAttributes {
	return &NullablePATCHNotificationsNotificationId200ResponseDataAttributes{value: val, isSet: true}
}

func (v NullablePATCHNotificationsNotificationId200ResponseDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePATCHNotificationsNotificationId200ResponseDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
