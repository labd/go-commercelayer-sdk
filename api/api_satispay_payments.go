/*
Commerce Layer API

Headless Commerce for Global Brands.

API version: 7.6.1
Contact: support@commercelayer.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// SatispayPaymentsApiService SatispayPaymentsApi service
type SatispayPaymentsApiService service

type SatispayPaymentsApiDELETESatispayPaymentsSatispayPaymentIdRequest struct {
	ctx               context.Context
	ApiService        *SatispayPaymentsApiService
	satispayPaymentId interface{}
}

func (r SatispayPaymentsApiDELETESatispayPaymentsSatispayPaymentIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DELETESatispayPaymentsSatispayPaymentIdExecute(r)
}

/*
DELETESatispayPaymentsSatispayPaymentId Delete a satispay payment

Delete a satispay payment

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param satispayPaymentId The resource's id
	@return SatispayPaymentsApiDELETESatispayPaymentsSatispayPaymentIdRequest
*/
func (a *SatispayPaymentsApiService) DELETESatispayPaymentsSatispayPaymentId(ctx context.Context, satispayPaymentId interface{}) SatispayPaymentsApiDELETESatispayPaymentsSatispayPaymentIdRequest {
	return SatispayPaymentsApiDELETESatispayPaymentsSatispayPaymentIdRequest{
		ApiService:        a,
		ctx:               ctx,
		satispayPaymentId: satispayPaymentId,
	}
}

// Execute executes the request
func (a *SatispayPaymentsApiService) DELETESatispayPaymentsSatispayPaymentIdExecute(r SatispayPaymentsApiDELETESatispayPaymentsSatispayPaymentIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SatispayPaymentsApiService.DELETESatispayPaymentsSatispayPaymentId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/satispay_payments/{satispayPaymentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"satispayPaymentId"+"}", url.PathEscape(parameterValueToString(r.satispayPaymentId, "satispayPaymentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SatispayPaymentsApiGETSatispayGatewayIdSatispayPaymentsRequest struct {
	ctx               context.Context
	ApiService        *SatispayPaymentsApiService
	satispayGatewayId interface{}
}

func (r SatispayPaymentsApiGETSatispayGatewayIdSatispayPaymentsRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETSatispayGatewayIdSatispayPaymentsExecute(r)
}

/*
GETSatispayGatewayIdSatispayPayments Retrieve the satispay payments associated to the satispay gateway

Retrieve the satispay payments associated to the satispay gateway

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param satispayGatewayId The resource's id
	@return SatispayPaymentsApiGETSatispayGatewayIdSatispayPaymentsRequest
*/
func (a *SatispayPaymentsApiService) GETSatispayGatewayIdSatispayPayments(ctx context.Context, satispayGatewayId interface{}) SatispayPaymentsApiGETSatispayGatewayIdSatispayPaymentsRequest {
	return SatispayPaymentsApiGETSatispayGatewayIdSatispayPaymentsRequest{
		ApiService:        a,
		ctx:               ctx,
		satispayGatewayId: satispayGatewayId,
	}
}

// Execute executes the request
func (a *SatispayPaymentsApiService) GETSatispayGatewayIdSatispayPaymentsExecute(r SatispayPaymentsApiGETSatispayGatewayIdSatispayPaymentsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SatispayPaymentsApiService.GETSatispayGatewayIdSatispayPayments")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/satispay_gateways/{satispayGatewayId}/satispay_payments"
	localVarPath = strings.Replace(localVarPath, "{"+"satispayGatewayId"+"}", url.PathEscape(parameterValueToString(r.satispayGatewayId, "satispayGatewayId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SatispayPaymentsApiGETSatispayPaymentsRequest struct {
	ctx        context.Context
	ApiService *SatispayPaymentsApiService
}

func (r SatispayPaymentsApiGETSatispayPaymentsRequest) Execute() (*GETSatispayPayments200Response, *http.Response, error) {
	return r.ApiService.GETSatispayPaymentsExecute(r)
}

/*
GETSatispayPayments List all satispay payments

List all satispay payments

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SatispayPaymentsApiGETSatispayPaymentsRequest
*/
func (a *SatispayPaymentsApiService) GETSatispayPayments(ctx context.Context) SatispayPaymentsApiGETSatispayPaymentsRequest {
	return SatispayPaymentsApiGETSatispayPaymentsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return GETSatispayPayments200Response
func (a *SatispayPaymentsApiService) GETSatispayPaymentsExecute(r SatispayPaymentsApiGETSatispayPaymentsRequest) (*GETSatispayPayments200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GETSatispayPayments200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SatispayPaymentsApiService.GETSatispayPayments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/satispay_payments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SatispayPaymentsApiGETSatispayPaymentsSatispayPaymentIdRequest struct {
	ctx               context.Context
	ApiService        *SatispayPaymentsApiService
	satispayPaymentId interface{}
}

func (r SatispayPaymentsApiGETSatispayPaymentsSatispayPaymentIdRequest) Execute() (*GETSatispayPaymentsSatispayPaymentId200Response, *http.Response, error) {
	return r.ApiService.GETSatispayPaymentsSatispayPaymentIdExecute(r)
}

/*
GETSatispayPaymentsSatispayPaymentId Retrieve a satispay payment

Retrieve a satispay payment

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param satispayPaymentId The resource's id
	@return SatispayPaymentsApiGETSatispayPaymentsSatispayPaymentIdRequest
*/
func (a *SatispayPaymentsApiService) GETSatispayPaymentsSatispayPaymentId(ctx context.Context, satispayPaymentId interface{}) SatispayPaymentsApiGETSatispayPaymentsSatispayPaymentIdRequest {
	return SatispayPaymentsApiGETSatispayPaymentsSatispayPaymentIdRequest{
		ApiService:        a,
		ctx:               ctx,
		satispayPaymentId: satispayPaymentId,
	}
}

// Execute executes the request
//
//	@return GETSatispayPaymentsSatispayPaymentId200Response
func (a *SatispayPaymentsApiService) GETSatispayPaymentsSatispayPaymentIdExecute(r SatispayPaymentsApiGETSatispayPaymentsSatispayPaymentIdRequest) (*GETSatispayPaymentsSatispayPaymentId200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GETSatispayPaymentsSatispayPaymentId200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SatispayPaymentsApiService.GETSatispayPaymentsSatispayPaymentId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/satispay_payments/{satispayPaymentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"satispayPaymentId"+"}", url.PathEscape(parameterValueToString(r.satispayPaymentId, "satispayPaymentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SatispayPaymentsApiPATCHSatispayPaymentsSatispayPaymentIdRequest struct {
	ctx                   context.Context
	ApiService            *SatispayPaymentsApiService
	satispayPaymentUpdate *SatispayPaymentUpdate
	satispayPaymentId     interface{}
}

func (r SatispayPaymentsApiPATCHSatispayPaymentsSatispayPaymentIdRequest) SatispayPaymentUpdate(satispayPaymentUpdate SatispayPaymentUpdate) SatispayPaymentsApiPATCHSatispayPaymentsSatispayPaymentIdRequest {
	r.satispayPaymentUpdate = &satispayPaymentUpdate
	return r
}

func (r SatispayPaymentsApiPATCHSatispayPaymentsSatispayPaymentIdRequest) Execute() (*PATCHSatispayPaymentsSatispayPaymentId200Response, *http.Response, error) {
	return r.ApiService.PATCHSatispayPaymentsSatispayPaymentIdExecute(r)
}

/*
PATCHSatispayPaymentsSatispayPaymentId Update a satispay payment

Update a satispay payment

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param satispayPaymentId The resource's id
	@return SatispayPaymentsApiPATCHSatispayPaymentsSatispayPaymentIdRequest
*/
func (a *SatispayPaymentsApiService) PATCHSatispayPaymentsSatispayPaymentId(ctx context.Context, satispayPaymentId interface{}) SatispayPaymentsApiPATCHSatispayPaymentsSatispayPaymentIdRequest {
	return SatispayPaymentsApiPATCHSatispayPaymentsSatispayPaymentIdRequest{
		ApiService:        a,
		ctx:               ctx,
		satispayPaymentId: satispayPaymentId,
	}
}

// Execute executes the request
//
//	@return PATCHSatispayPaymentsSatispayPaymentId200Response
func (a *SatispayPaymentsApiService) PATCHSatispayPaymentsSatispayPaymentIdExecute(r SatispayPaymentsApiPATCHSatispayPaymentsSatispayPaymentIdRequest) (*PATCHSatispayPaymentsSatispayPaymentId200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PATCHSatispayPaymentsSatispayPaymentId200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SatispayPaymentsApiService.PATCHSatispayPaymentsSatispayPaymentId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/satispay_payments/{satispayPaymentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"satispayPaymentId"+"}", url.PathEscape(parameterValueToString(r.satispayPaymentId, "satispayPaymentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.satispayPaymentUpdate == nil {
		return localVarReturnValue, nil, reportError("satispayPaymentUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.satispayPaymentUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SatispayPaymentsApiPOSTSatispayPaymentsRequest struct {
	ctx                   context.Context
	ApiService            *SatispayPaymentsApiService
	satispayPaymentCreate *SatispayPaymentCreate
}

func (r SatispayPaymentsApiPOSTSatispayPaymentsRequest) SatispayPaymentCreate(satispayPaymentCreate SatispayPaymentCreate) SatispayPaymentsApiPOSTSatispayPaymentsRequest {
	r.satispayPaymentCreate = &satispayPaymentCreate
	return r
}

func (r SatispayPaymentsApiPOSTSatispayPaymentsRequest) Execute() (*POSTSatispayPayments201Response, *http.Response, error) {
	return r.ApiService.POSTSatispayPaymentsExecute(r)
}

/*
POSTSatispayPayments Create a satispay payment

Create a satispay payment

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SatispayPaymentsApiPOSTSatispayPaymentsRequest
*/
func (a *SatispayPaymentsApiService) POSTSatispayPayments(ctx context.Context) SatispayPaymentsApiPOSTSatispayPaymentsRequest {
	return SatispayPaymentsApiPOSTSatispayPaymentsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return POSTSatispayPayments201Response
func (a *SatispayPaymentsApiService) POSTSatispayPaymentsExecute(r SatispayPaymentsApiPOSTSatispayPaymentsRequest) (*POSTSatispayPayments201Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *POSTSatispayPayments201Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SatispayPaymentsApiService.POSTSatispayPayments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/satispay_payments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.satispayPaymentCreate == nil {
		return localVarReturnValue, nil, reportError("satispayPaymentCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.satispayPaymentCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
