/*
Commerce Layer API

Headless Commerce for Global Brands.

API version: 7.6.1
Contact: support@commercelayer.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the CleanupUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CleanupUpdate{}

// CleanupUpdate struct for CleanupUpdate
type CleanupUpdate struct {
	Data CleanupUpdateData `json:"data"`
}

// NewCleanupUpdate instantiates a new CleanupUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCleanupUpdate(data CleanupUpdateData) *CleanupUpdate {
	this := CleanupUpdate{}
	this.Data = data
	return &this
}

// NewCleanupUpdateWithDefaults instantiates a new CleanupUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCleanupUpdateWithDefaults() *CleanupUpdate {
	this := CleanupUpdate{}
	return &this
}

// GetData returns the Data field value
func (o *CleanupUpdate) GetData() CleanupUpdateData {
	if o == nil {
		var ret CleanupUpdateData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *CleanupUpdate) GetDataOk() (*CleanupUpdateData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *CleanupUpdate) SetData(v CleanupUpdateData) {
	o.Data = v
}

func (o CleanupUpdate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CleanupUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

type NullableCleanupUpdate struct {
	value *CleanupUpdate
	isSet bool
}

func (v NullableCleanupUpdate) Get() *CleanupUpdate {
	return v.value
}

func (v *NullableCleanupUpdate) Set(val *CleanupUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableCleanupUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableCleanupUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCleanupUpdate(val *CleanupUpdate) *NullableCleanupUpdate {
	return &NullableCleanupUpdate{value: val, isSet: true}
}

func (v NullableCleanupUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCleanupUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
