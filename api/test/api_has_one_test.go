/*
Commerce Layer API

Testing HasOneApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	openapiclient "github.com/incentro-dc/go-commercelayer-sdk/api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_api_HasOneApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test HasOneApiService GETAddressIdGeocoder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var addressId interface{}

		httpRes, err := apiClient.HasOneApi.GETAddressIdGeocoder(context.Background(), addressId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETAdyenPaymentIdOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var adyenPaymentId interface{}

		httpRes, err := apiClient.HasOneApi.GETAdyenPaymentIdOrder(context.Background(), adyenPaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETAdyenPaymentIdPaymentGateway", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var adyenPaymentId interface{}

		httpRes, err := apiClient.HasOneApi.GETAdyenPaymentIdPaymentGateway(context.Background(), adyenPaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETAuthorizationIdOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var authorizationId interface{}

		httpRes, err := apiClient.HasOneApi.GETAuthorizationIdOrder(context.Background(), authorizationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETAxervePaymentIdOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var axervePaymentId interface{}

		httpRes, err := apiClient.HasOneApi.GETAxervePaymentIdOrder(context.Background(), axervePaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETAxervePaymentIdPaymentGateway", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var axervePaymentId interface{}

		httpRes, err := apiClient.HasOneApi.GETAxervePaymentIdPaymentGateway(context.Background(), axervePaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETBraintreePaymentIdOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var braintreePaymentId interface{}

		httpRes, err := apiClient.HasOneApi.GETBraintreePaymentIdOrder(context.Background(), braintreePaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETBraintreePaymentIdPaymentGateway", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var braintreePaymentId interface{}

		httpRes, err := apiClient.HasOneApi.GETBraintreePaymentIdPaymentGateway(context.Background(), braintreePaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETBundleIdMarket", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var bundleId interface{}

		httpRes, err := apiClient.HasOneApi.GETBundleIdMarket(context.Background(), bundleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETBundleIdSkuList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var bundleId interface{}

		httpRes, err := apiClient.HasOneApi.GETBundleIdSkuList(context.Background(), bundleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETBuyXPayYPromotionIdCouponCodesPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var buyXPayYPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETBuyXPayYPromotionIdCouponCodesPromotionRule(context.Background(), buyXPayYPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETBuyXPayYPromotionIdCustomPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var buyXPayYPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETBuyXPayYPromotionIdCustomPromotionRule(context.Background(), buyXPayYPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETBuyXPayYPromotionIdMarket", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var buyXPayYPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETBuyXPayYPromotionIdMarket(context.Background(), buyXPayYPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETBuyXPayYPromotionIdOrderAmountPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var buyXPayYPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETBuyXPayYPromotionIdOrderAmountPromotionRule(context.Background(), buyXPayYPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETBuyXPayYPromotionIdSkuList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var buyXPayYPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETBuyXPayYPromotionIdSkuList(context.Background(), buyXPayYPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETBuyXPayYPromotionIdSkuListPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var buyXPayYPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETBuyXPayYPromotionIdSkuListPromotionRule(context.Background(), buyXPayYPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETCaptureIdOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var captureId interface{}

		httpRes, err := apiClient.HasOneApi.GETCaptureIdOrder(context.Background(), captureId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETCaptureIdReferenceAuthorization", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var captureId interface{}

		httpRes, err := apiClient.HasOneApi.GETCaptureIdReferenceAuthorization(context.Background(), captureId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETCaptureIdReturn", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var captureId interface{}

		httpRes, err := apiClient.HasOneApi.GETCaptureIdReturn(context.Background(), captureId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETCarrierAccountIdMarket", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var carrierAccountId interface{}

		httpRes, err := apiClient.HasOneApi.GETCarrierAccountIdMarket(context.Background(), carrierAccountId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETCheckoutComPaymentIdOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var checkoutComPaymentId interface{}

		httpRes, err := apiClient.HasOneApi.GETCheckoutComPaymentIdOrder(context.Background(), checkoutComPaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETCheckoutComPaymentIdPaymentGateway", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var checkoutComPaymentId interface{}

		httpRes, err := apiClient.HasOneApi.GETCheckoutComPaymentIdPaymentGateway(context.Background(), checkoutComPaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETCouponIdCouponRecipient", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var couponId interface{}

		httpRes, err := apiClient.HasOneApi.GETCouponIdCouponRecipient(context.Background(), couponId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETCouponIdPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var couponId interface{}

		httpRes, err := apiClient.HasOneApi.GETCouponIdPromotionRule(context.Background(), couponId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETCouponRecipientIdCustomer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var couponRecipientId interface{}

		httpRes, err := apiClient.HasOneApi.GETCouponRecipientIdCustomer(context.Background(), couponRecipientId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETCustomerAddressIdAddress", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerAddressId interface{}

		httpRes, err := apiClient.HasOneApi.GETCustomerAddressIdAddress(context.Background(), customerAddressId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETCustomerAddressIdCustomer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerAddressId interface{}

		httpRes, err := apiClient.HasOneApi.GETCustomerAddressIdCustomer(context.Background(), customerAddressId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETCustomerIdCustomerGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId interface{}

		httpRes, err := apiClient.HasOneApi.GETCustomerIdCustomerGroup(context.Background(), customerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETCustomerPasswordResetIdCustomer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerPasswordResetId interface{}

		httpRes, err := apiClient.HasOneApi.GETCustomerPasswordResetIdCustomer(context.Background(), customerPasswordResetId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETCustomerPaymentSourceIdCustomer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerPaymentSourceId interface{}

		httpRes, err := apiClient.HasOneApi.GETCustomerPaymentSourceIdCustomer(context.Background(), customerPaymentSourceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETCustomerPaymentSourceIdPaymentMethod", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerPaymentSourceId interface{}

		httpRes, err := apiClient.HasOneApi.GETCustomerPaymentSourceIdPaymentMethod(context.Background(), customerPaymentSourceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETCustomerSubscriptionIdCustomer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerSubscriptionId interface{}

		httpRes, err := apiClient.HasOneApi.GETCustomerSubscriptionIdCustomer(context.Background(), customerSubscriptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETDeliveryLeadTimeIdShippingMethod", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deliveryLeadTimeId interface{}

		httpRes, err := apiClient.HasOneApi.GETDeliveryLeadTimeIdShippingMethod(context.Background(), deliveryLeadTimeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETDeliveryLeadTimeIdStockLocation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deliveryLeadTimeId interface{}

		httpRes, err := apiClient.HasOneApi.GETDeliveryLeadTimeIdStockLocation(context.Background(), deliveryLeadTimeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETEventCallbackIdWebhook", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var eventCallbackId interface{}

		httpRes, err := apiClient.HasOneApi.GETEventCallbackIdWebhook(context.Background(), eventCallbackId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETExternalPaymentIdOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var externalPaymentId interface{}

		httpRes, err := apiClient.HasOneApi.GETExternalPaymentIdOrder(context.Background(), externalPaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETExternalPaymentIdPaymentGateway", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var externalPaymentId interface{}

		httpRes, err := apiClient.HasOneApi.GETExternalPaymentIdPaymentGateway(context.Background(), externalPaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETExternalPaymentIdWallet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var externalPaymentId interface{}

		httpRes, err := apiClient.HasOneApi.GETExternalPaymentIdWallet(context.Background(), externalPaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETExternalPromotionIdCouponCodesPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var externalPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETExternalPromotionIdCouponCodesPromotionRule(context.Background(), externalPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETExternalPromotionIdCustomPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var externalPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETExternalPromotionIdCustomPromotionRule(context.Background(), externalPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETExternalPromotionIdMarket", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var externalPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETExternalPromotionIdMarket(context.Background(), externalPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETExternalPromotionIdOrderAmountPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var externalPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETExternalPromotionIdOrderAmountPromotionRule(context.Background(), externalPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETExternalPromotionIdSkuList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var externalPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETExternalPromotionIdSkuList(context.Background(), externalPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETExternalPromotionIdSkuListPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var externalPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETExternalPromotionIdSkuListPromotionRule(context.Background(), externalPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETFixedAmountPromotionIdCouponCodesPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fixedAmountPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETFixedAmountPromotionIdCouponCodesPromotionRule(context.Background(), fixedAmountPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETFixedAmountPromotionIdCustomPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fixedAmountPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETFixedAmountPromotionIdCustomPromotionRule(context.Background(), fixedAmountPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETFixedAmountPromotionIdMarket", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fixedAmountPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETFixedAmountPromotionIdMarket(context.Background(), fixedAmountPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETFixedAmountPromotionIdOrderAmountPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fixedAmountPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETFixedAmountPromotionIdOrderAmountPromotionRule(context.Background(), fixedAmountPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETFixedAmountPromotionIdSkuList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fixedAmountPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETFixedAmountPromotionIdSkuList(context.Background(), fixedAmountPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETFixedAmountPromotionIdSkuListPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fixedAmountPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETFixedAmountPromotionIdSkuListPromotionRule(context.Background(), fixedAmountPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETFixedPricePromotionIdCouponCodesPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fixedPricePromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETFixedPricePromotionIdCouponCodesPromotionRule(context.Background(), fixedPricePromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETFixedPricePromotionIdCustomPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fixedPricePromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETFixedPricePromotionIdCustomPromotionRule(context.Background(), fixedPricePromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETFixedPricePromotionIdMarket", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fixedPricePromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETFixedPricePromotionIdMarket(context.Background(), fixedPricePromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETFixedPricePromotionIdOrderAmountPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fixedPricePromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETFixedPricePromotionIdOrderAmountPromotionRule(context.Background(), fixedPricePromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETFixedPricePromotionIdSkuList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fixedPricePromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETFixedPricePromotionIdSkuList(context.Background(), fixedPricePromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETFixedPricePromotionIdSkuListPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fixedPricePromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETFixedPricePromotionIdSkuListPromotionRule(context.Background(), fixedPricePromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETFlexPromotionIdCouponCodesPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var flexPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETFlexPromotionIdCouponCodesPromotionRule(context.Background(), flexPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETFreeGiftPromotionIdCouponCodesPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var freeGiftPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETFreeGiftPromotionIdCouponCodesPromotionRule(context.Background(), freeGiftPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETFreeGiftPromotionIdCustomPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var freeGiftPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETFreeGiftPromotionIdCustomPromotionRule(context.Background(), freeGiftPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETFreeGiftPromotionIdMarket", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var freeGiftPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETFreeGiftPromotionIdMarket(context.Background(), freeGiftPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETFreeGiftPromotionIdOrderAmountPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var freeGiftPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETFreeGiftPromotionIdOrderAmountPromotionRule(context.Background(), freeGiftPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETFreeGiftPromotionIdSkuList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var freeGiftPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETFreeGiftPromotionIdSkuList(context.Background(), freeGiftPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETFreeGiftPromotionIdSkuListPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var freeGiftPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETFreeGiftPromotionIdSkuListPromotionRule(context.Background(), freeGiftPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETFreeShippingPromotionIdCouponCodesPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var freeShippingPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETFreeShippingPromotionIdCouponCodesPromotionRule(context.Background(), freeShippingPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETFreeShippingPromotionIdCustomPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var freeShippingPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETFreeShippingPromotionIdCustomPromotionRule(context.Background(), freeShippingPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETFreeShippingPromotionIdMarket", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var freeShippingPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETFreeShippingPromotionIdMarket(context.Background(), freeShippingPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETFreeShippingPromotionIdOrderAmountPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var freeShippingPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETFreeShippingPromotionIdOrderAmountPromotionRule(context.Background(), freeShippingPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETFreeShippingPromotionIdSkuList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var freeShippingPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETFreeShippingPromotionIdSkuList(context.Background(), freeShippingPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETFreeShippingPromotionIdSkuListPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var freeShippingPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETFreeShippingPromotionIdSkuListPromotionRule(context.Background(), freeShippingPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETGiftCardIdGiftCardRecipient", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var giftCardId interface{}

		httpRes, err := apiClient.HasOneApi.GETGiftCardIdGiftCardRecipient(context.Background(), giftCardId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETGiftCardIdMarket", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var giftCardId interface{}

		httpRes, err := apiClient.HasOneApi.GETGiftCardIdMarket(context.Background(), giftCardId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETGiftCardRecipientIdCustomer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var giftCardRecipientId interface{}

		httpRes, err := apiClient.HasOneApi.GETGiftCardRecipientIdCustomer(context.Background(), giftCardRecipientId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETInStockSubscriptionIdCustomer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var inStockSubscriptionId interface{}

		httpRes, err := apiClient.HasOneApi.GETInStockSubscriptionIdCustomer(context.Background(), inStockSubscriptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETInStockSubscriptionIdMarket", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var inStockSubscriptionId interface{}

		httpRes, err := apiClient.HasOneApi.GETInStockSubscriptionIdMarket(context.Background(), inStockSubscriptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETInStockSubscriptionIdSku", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var inStockSubscriptionId interface{}

		httpRes, err := apiClient.HasOneApi.GETInStockSubscriptionIdSku(context.Background(), inStockSubscriptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETInventoryReturnLocationIdInventoryModel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var inventoryReturnLocationId interface{}

		httpRes, err := apiClient.HasOneApi.GETInventoryReturnLocationIdInventoryModel(context.Background(), inventoryReturnLocationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETInventoryReturnLocationIdStockLocation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var inventoryReturnLocationId interface{}

		httpRes, err := apiClient.HasOneApi.GETInventoryReturnLocationIdStockLocation(context.Background(), inventoryReturnLocationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETInventoryStockLocationIdInventoryModel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var inventoryStockLocationId interface{}

		httpRes, err := apiClient.HasOneApi.GETInventoryStockLocationIdInventoryModel(context.Background(), inventoryStockLocationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETInventoryStockLocationIdStockLocation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var inventoryStockLocationId interface{}

		httpRes, err := apiClient.HasOneApi.GETInventoryStockLocationIdStockLocation(context.Background(), inventoryStockLocationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETKlarnaPaymentIdOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var klarnaPaymentId interface{}

		httpRes, err := apiClient.HasOneApi.GETKlarnaPaymentIdOrder(context.Background(), klarnaPaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETKlarnaPaymentIdPaymentGateway", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var klarnaPaymentId interface{}

		httpRes, err := apiClient.HasOneApi.GETKlarnaPaymentIdPaymentGateway(context.Background(), klarnaPaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETLineItemIdOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineItemId interface{}

		httpRes, err := apiClient.HasOneApi.GETLineItemIdOrder(context.Background(), lineItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETLineItemOptionIdLineItem", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineItemOptionId interface{}

		httpRes, err := apiClient.HasOneApi.GETLineItemOptionIdLineItem(context.Background(), lineItemOptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETLineItemOptionIdSkuOption", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineItemOptionId interface{}

		httpRes, err := apiClient.HasOneApi.GETLineItemOptionIdSkuOption(context.Background(), lineItemOptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETMarketIdBasePriceList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var marketId interface{}

		httpRes, err := apiClient.HasOneApi.GETMarketIdBasePriceList(context.Background(), marketId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETMarketIdCustomerGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var marketId interface{}

		httpRes, err := apiClient.HasOneApi.GETMarketIdCustomerGroup(context.Background(), marketId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETMarketIdGeocoder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var marketId interface{}

		httpRes, err := apiClient.HasOneApi.GETMarketIdGeocoder(context.Background(), marketId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETMarketIdInventoryModel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var marketId interface{}

		httpRes, err := apiClient.HasOneApi.GETMarketIdInventoryModel(context.Background(), marketId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETMarketIdMerchant", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var marketId interface{}

		httpRes, err := apiClient.HasOneApi.GETMarketIdMerchant(context.Background(), marketId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETMarketIdPriceList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var marketId interface{}

		httpRes, err := apiClient.HasOneApi.GETMarketIdPriceList(context.Background(), marketId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETMarketIdSubscriptionModel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var marketId interface{}

		httpRes, err := apiClient.HasOneApi.GETMarketIdSubscriptionModel(context.Background(), marketId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETMarketIdTaxCalculator", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var marketId interface{}

		httpRes, err := apiClient.HasOneApi.GETMarketIdTaxCalculator(context.Background(), marketId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETMerchantIdAddress", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var merchantId interface{}

		httpRes, err := apiClient.HasOneApi.GETMerchantIdAddress(context.Background(), merchantId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETOrderCopyIdOrderSubscription", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderCopyId interface{}

		httpRes, err := apiClient.HasOneApi.GETOrderCopyIdOrderSubscription(context.Background(), orderCopyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETOrderCopyIdSourceOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderCopyId interface{}

		httpRes, err := apiClient.HasOneApi.GETOrderCopyIdSourceOrder(context.Background(), orderCopyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETOrderCopyIdTargetOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderCopyId interface{}

		httpRes, err := apiClient.HasOneApi.GETOrderCopyIdTargetOrder(context.Background(), orderCopyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETOrderFactoryIdSourceOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderFactoryId interface{}

		httpRes, err := apiClient.HasOneApi.GETOrderFactoryIdSourceOrder(context.Background(), orderFactoryId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETOrderFactoryIdTargetOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderFactoryId interface{}

		httpRes, err := apiClient.HasOneApi.GETOrderFactoryIdTargetOrder(context.Background(), orderFactoryId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETOrderIdBillingAddress", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasOneApi.GETOrderIdBillingAddress(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETOrderIdCustomer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasOneApi.GETOrderIdCustomer(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETOrderIdMarket", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasOneApi.GETOrderIdMarket(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETOrderIdOrderSubscription", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasOneApi.GETOrderIdOrderSubscription(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETOrderIdPaymentMethod", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasOneApi.GETOrderIdPaymentMethod(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETOrderIdShippingAddress", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasOneApi.GETOrderIdShippingAddress(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETOrderIdStore", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasOneApi.GETOrderIdStore(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETOrderSubscriptionIdCustomer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderSubscriptionId interface{}

		httpRes, err := apiClient.HasOneApi.GETOrderSubscriptionIdCustomer(context.Background(), orderSubscriptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETOrderSubscriptionIdCustomerPaymentSource", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderSubscriptionId interface{}

		httpRes, err := apiClient.HasOneApi.GETOrderSubscriptionIdCustomerPaymentSource(context.Background(), orderSubscriptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETOrderSubscriptionIdMarket", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderSubscriptionId interface{}

		httpRes, err := apiClient.HasOneApi.GETOrderSubscriptionIdMarket(context.Background(), orderSubscriptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETOrderSubscriptionIdSourceOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderSubscriptionId interface{}

		httpRes, err := apiClient.HasOneApi.GETOrderSubscriptionIdSourceOrder(context.Background(), orderSubscriptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETOrderSubscriptionIdSubscriptionModel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderSubscriptionId interface{}

		httpRes, err := apiClient.HasOneApi.GETOrderSubscriptionIdSubscriptionModel(context.Background(), orderSubscriptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETOrderSubscriptionItemIdOrderSubscription", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderSubscriptionItemId interface{}

		httpRes, err := apiClient.HasOneApi.GETOrderSubscriptionItemIdOrderSubscription(context.Background(), orderSubscriptionItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETOrderSubscriptionItemIdSourceLineItem", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderSubscriptionItemId interface{}

		httpRes, err := apiClient.HasOneApi.GETOrderSubscriptionItemIdSourceLineItem(context.Background(), orderSubscriptionItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETPackageIdStockLocation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var packageId interface{}

		httpRes, err := apiClient.HasOneApi.GETPackageIdStockLocation(context.Background(), packageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETParcelIdPackage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var parcelId interface{}

		httpRes, err := apiClient.HasOneApi.GETParcelIdPackage(context.Background(), parcelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETParcelIdShipment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var parcelId interface{}

		httpRes, err := apiClient.HasOneApi.GETParcelIdShipment(context.Background(), parcelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETParcelLineItemIdParcel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var parcelLineItemId interface{}

		httpRes, err := apiClient.HasOneApi.GETParcelLineItemIdParcel(context.Background(), parcelLineItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETParcelLineItemIdStockLineItem", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var parcelLineItemId interface{}

		httpRes, err := apiClient.HasOneApi.GETParcelLineItemIdStockLineItem(context.Background(), parcelLineItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETPaymentMethodIdMarket", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var paymentMethodId interface{}

		httpRes, err := apiClient.HasOneApi.GETPaymentMethodIdMarket(context.Background(), paymentMethodId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETPaymentMethodIdPaymentGateway", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var paymentMethodId interface{}

		httpRes, err := apiClient.HasOneApi.GETPaymentMethodIdPaymentGateway(context.Background(), paymentMethodId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETPaymentMethodIdStore", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var paymentMethodId interface{}

		httpRes, err := apiClient.HasOneApi.GETPaymentMethodIdStore(context.Background(), paymentMethodId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETPaymentOptionIdOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var paymentOptionId interface{}

		httpRes, err := apiClient.HasOneApi.GETPaymentOptionIdOrder(context.Background(), paymentOptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETPaypalPaymentIdOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var paypalPaymentId interface{}

		httpRes, err := apiClient.HasOneApi.GETPaypalPaymentIdOrder(context.Background(), paypalPaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETPaypalPaymentIdPaymentGateway", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var paypalPaymentId interface{}

		httpRes, err := apiClient.HasOneApi.GETPaypalPaymentIdPaymentGateway(context.Background(), paypalPaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETPercentageDiscountPromotionIdCouponCodesPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var percentageDiscountPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETPercentageDiscountPromotionIdCouponCodesPromotionRule(context.Background(), percentageDiscountPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETPercentageDiscountPromotionIdCustomPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var percentageDiscountPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETPercentageDiscountPromotionIdCustomPromotionRule(context.Background(), percentageDiscountPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETPercentageDiscountPromotionIdMarket", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var percentageDiscountPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETPercentageDiscountPromotionIdMarket(context.Background(), percentageDiscountPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETPercentageDiscountPromotionIdOrderAmountPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var percentageDiscountPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETPercentageDiscountPromotionIdOrderAmountPromotionRule(context.Background(), percentageDiscountPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETPercentageDiscountPromotionIdSkuList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var percentageDiscountPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETPercentageDiscountPromotionIdSkuList(context.Background(), percentageDiscountPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETPercentageDiscountPromotionIdSkuListPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var percentageDiscountPromotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETPercentageDiscountPromotionIdSkuListPromotionRule(context.Background(), percentageDiscountPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETPriceFrequencyTierIdPrice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceFrequencyTierId interface{}

		httpRes, err := apiClient.HasOneApi.GETPriceFrequencyTierIdPrice(context.Background(), priceFrequencyTierId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETPriceIdJwtCustomer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceId interface{}

		httpRes, err := apiClient.HasOneApi.GETPriceIdJwtCustomer(context.Background(), priceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETPriceIdPriceList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceId interface{}

		httpRes, err := apiClient.HasOneApi.GETPriceIdPriceList(context.Background(), priceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETPriceIdSku", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceId interface{}

		httpRes, err := apiClient.HasOneApi.GETPriceIdSku(context.Background(), priceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETPriceListSchedulerIdMarket", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceListSchedulerId interface{}

		httpRes, err := apiClient.HasOneApi.GETPriceListSchedulerIdMarket(context.Background(), priceListSchedulerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETPriceListSchedulerIdPriceList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceListSchedulerId interface{}

		httpRes, err := apiClient.HasOneApi.GETPriceListSchedulerIdPriceList(context.Background(), priceListSchedulerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETPriceTierIdPrice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceTierId interface{}

		httpRes, err := apiClient.HasOneApi.GETPriceTierIdPrice(context.Background(), priceTierId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETPriceVolumeTierIdPrice", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceVolumeTierId interface{}

		httpRes, err := apiClient.HasOneApi.GETPriceVolumeTierIdPrice(context.Background(), priceVolumeTierId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETPromotionIdCouponCodesPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var promotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETPromotionIdCouponCodesPromotionRule(context.Background(), promotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETPromotionIdCustomPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var promotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETPromotionIdCustomPromotionRule(context.Background(), promotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETPromotionIdMarket", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var promotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETPromotionIdMarket(context.Background(), promotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETPromotionIdOrderAmountPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var promotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETPromotionIdOrderAmountPromotionRule(context.Background(), promotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETPromotionIdSkuList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var promotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETPromotionIdSkuList(context.Background(), promotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETPromotionIdSkuListPromotionRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var promotionId interface{}

		httpRes, err := apiClient.HasOneApi.GETPromotionIdSkuListPromotionRule(context.Background(), promotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETRecurringOrderCopyIdOrderSubscription", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var recurringOrderCopyId interface{}

		httpRes, err := apiClient.HasOneApi.GETRecurringOrderCopyIdOrderSubscription(context.Background(), recurringOrderCopyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETRecurringOrderCopyIdSourceOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var recurringOrderCopyId interface{}

		httpRes, err := apiClient.HasOneApi.GETRecurringOrderCopyIdSourceOrder(context.Background(), recurringOrderCopyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETRecurringOrderCopyIdTargetOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var recurringOrderCopyId interface{}

		httpRes, err := apiClient.HasOneApi.GETRecurringOrderCopyIdTargetOrder(context.Background(), recurringOrderCopyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETRefundIdOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var refundId interface{}

		httpRes, err := apiClient.HasOneApi.GETRefundIdOrder(context.Background(), refundId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETRefundIdReferenceCapture", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var refundId interface{}

		httpRes, err := apiClient.HasOneApi.GETRefundIdReferenceCapture(context.Background(), refundId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETRefundIdReturn", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var refundId interface{}

		httpRes, err := apiClient.HasOneApi.GETRefundIdReturn(context.Background(), refundId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETReservedStockIdSku", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var reservedStockId interface{}

		httpRes, err := apiClient.HasOneApi.GETReservedStockIdSku(context.Background(), reservedStockId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETReservedStockIdStockItem", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var reservedStockId interface{}

		httpRes, err := apiClient.HasOneApi.GETReservedStockIdStockItem(context.Background(), reservedStockId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETReturnIdCustomer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var returnId interface{}

		httpRes, err := apiClient.HasOneApi.GETReturnIdCustomer(context.Background(), returnId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETReturnIdDestinationAddress", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var returnId interface{}

		httpRes, err := apiClient.HasOneApi.GETReturnIdDestinationAddress(context.Background(), returnId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETReturnIdOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var returnId interface{}

		httpRes, err := apiClient.HasOneApi.GETReturnIdOrder(context.Background(), returnId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETReturnIdOriginAddress", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var returnId interface{}

		httpRes, err := apiClient.HasOneApi.GETReturnIdOriginAddress(context.Background(), returnId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETReturnIdReferenceCapture", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var returnId interface{}

		httpRes, err := apiClient.HasOneApi.GETReturnIdReferenceCapture(context.Background(), returnId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETReturnIdReferenceRefund", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var returnId interface{}

		httpRes, err := apiClient.HasOneApi.GETReturnIdReferenceRefund(context.Background(), returnId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETReturnIdStockLocation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var returnId interface{}

		httpRes, err := apiClient.HasOneApi.GETReturnIdStockLocation(context.Background(), returnId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETReturnLineItemIdLineItem", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var returnLineItemId interface{}

		httpRes, err := apiClient.HasOneApi.GETReturnLineItemIdLineItem(context.Background(), returnLineItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETReturnLineItemIdReturn", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var returnLineItemId interface{}

		httpRes, err := apiClient.HasOneApi.GETReturnLineItemIdReturn(context.Background(), returnLineItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETSatispayPaymentIdOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var satispayPaymentId interface{}

		httpRes, err := apiClient.HasOneApi.GETSatispayPaymentIdOrder(context.Background(), satispayPaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETSatispayPaymentIdPaymentGateway", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var satispayPaymentId interface{}

		httpRes, err := apiClient.HasOneApi.GETSatispayPaymentIdPaymentGateway(context.Background(), satispayPaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETShipmentIdDeliveryLeadTime", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shipmentId interface{}

		httpRes, err := apiClient.HasOneApi.GETShipmentIdDeliveryLeadTime(context.Background(), shipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETShipmentIdInventoryStockLocation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shipmentId interface{}

		httpRes, err := apiClient.HasOneApi.GETShipmentIdInventoryStockLocation(context.Background(), shipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETShipmentIdOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shipmentId interface{}

		httpRes, err := apiClient.HasOneApi.GETShipmentIdOrder(context.Background(), shipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETShipmentIdOriginAddress", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shipmentId interface{}

		httpRes, err := apiClient.HasOneApi.GETShipmentIdOriginAddress(context.Background(), shipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETShipmentIdShippingAddress", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shipmentId interface{}

		httpRes, err := apiClient.HasOneApi.GETShipmentIdShippingAddress(context.Background(), shipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETShipmentIdShippingCategory", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shipmentId interface{}

		httpRes, err := apiClient.HasOneApi.GETShipmentIdShippingCategory(context.Background(), shipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETShipmentIdShippingMethod", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shipmentId interface{}

		httpRes, err := apiClient.HasOneApi.GETShipmentIdShippingMethod(context.Background(), shipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETShipmentIdStockLocation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shipmentId interface{}

		httpRes, err := apiClient.HasOneApi.GETShipmentIdStockLocation(context.Background(), shipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETShippingMethodIdDeliveryLeadTimeForShipment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shippingMethodId interface{}

		httpRes, err := apiClient.HasOneApi.GETShippingMethodIdDeliveryLeadTimeForShipment(context.Background(), shippingMethodId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETShippingMethodIdMarket", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shippingMethodId interface{}

		httpRes, err := apiClient.HasOneApi.GETShippingMethodIdMarket(context.Background(), shippingMethodId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETShippingMethodIdShippingCategory", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shippingMethodId interface{}

		httpRes, err := apiClient.HasOneApi.GETShippingMethodIdShippingCategory(context.Background(), shippingMethodId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETShippingMethodIdShippingZone", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shippingMethodId interface{}

		httpRes, err := apiClient.HasOneApi.GETShippingMethodIdShippingZone(context.Background(), shippingMethodId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETShippingMethodIdStockLocation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shippingMethodId interface{}

		httpRes, err := apiClient.HasOneApi.GETShippingMethodIdStockLocation(context.Background(), shippingMethodId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETShippingMethodTierIdShippingMethod", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shippingMethodTierId interface{}

		httpRes, err := apiClient.HasOneApi.GETShippingMethodTierIdShippingMethod(context.Background(), shippingMethodTierId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETShippingWeightTierIdShippingMethod", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shippingWeightTierId interface{}

		httpRes, err := apiClient.HasOneApi.GETShippingWeightTierIdShippingMethod(context.Background(), shippingWeightTierId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETSkuIdJwtCustomer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuId interface{}

		httpRes, err := apiClient.HasOneApi.GETSkuIdJwtCustomer(context.Background(), skuId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETSkuIdShippingCategory", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuId interface{}

		httpRes, err := apiClient.HasOneApi.GETSkuIdShippingCategory(context.Background(), skuId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETSkuListIdCustomer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuListId interface{}

		httpRes, err := apiClient.HasOneApi.GETSkuListIdCustomer(context.Background(), skuListId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETSkuListItemIdSku", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuListItemId interface{}

		httpRes, err := apiClient.HasOneApi.GETSkuListItemIdSku(context.Background(), skuListItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETSkuListItemIdSkuList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuListItemId interface{}

		httpRes, err := apiClient.HasOneApi.GETSkuListItemIdSkuList(context.Background(), skuListItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETSkuListPromotionRuleIdSkuList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuListPromotionRuleId interface{}

		httpRes, err := apiClient.HasOneApi.GETSkuListPromotionRuleIdSkuList(context.Background(), skuListPromotionRuleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETSkuOptionIdMarket", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuOptionId interface{}

		httpRes, err := apiClient.HasOneApi.GETSkuOptionIdMarket(context.Background(), skuOptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETStockItemIdReservedStock", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockItemId interface{}

		httpRes, err := apiClient.HasOneApi.GETStockItemIdReservedStock(context.Background(), stockItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETStockItemIdSku", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockItemId interface{}

		httpRes, err := apiClient.HasOneApi.GETStockItemIdSku(context.Background(), stockItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETStockItemIdStockLocation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockItemId interface{}

		httpRes, err := apiClient.HasOneApi.GETStockItemIdStockLocation(context.Background(), stockItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETStockLineItemIdLineItem", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockLineItemId interface{}

		httpRes, err := apiClient.HasOneApi.GETStockLineItemIdLineItem(context.Background(), stockLineItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETStockLineItemIdShipment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockLineItemId interface{}

		httpRes, err := apiClient.HasOneApi.GETStockLineItemIdShipment(context.Background(), stockLineItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETStockLineItemIdSku", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockLineItemId interface{}

		httpRes, err := apiClient.HasOneApi.GETStockLineItemIdSku(context.Background(), stockLineItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETStockLineItemIdStockItem", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockLineItemId interface{}

		httpRes, err := apiClient.HasOneApi.GETStockLineItemIdStockItem(context.Background(), stockLineItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETStockLineItemIdStockReservation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockLineItemId interface{}

		httpRes, err := apiClient.HasOneApi.GETStockLineItemIdStockReservation(context.Background(), stockLineItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETStockLocationIdAddress", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockLocationId interface{}

		httpRes, err := apiClient.HasOneApi.GETStockLocationIdAddress(context.Background(), stockLocationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETStockReservationIdLineItem", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockReservationId interface{}

		httpRes, err := apiClient.HasOneApi.GETStockReservationIdLineItem(context.Background(), stockReservationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETStockReservationIdOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockReservationId interface{}

		httpRes, err := apiClient.HasOneApi.GETStockReservationIdOrder(context.Background(), stockReservationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETStockReservationIdReservedStock", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockReservationId interface{}

		httpRes, err := apiClient.HasOneApi.GETStockReservationIdReservedStock(context.Background(), stockReservationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETStockReservationIdSku", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockReservationId interface{}

		httpRes, err := apiClient.HasOneApi.GETStockReservationIdSku(context.Background(), stockReservationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETStockReservationIdStockItem", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockReservationId interface{}

		httpRes, err := apiClient.HasOneApi.GETStockReservationIdStockItem(context.Background(), stockReservationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETStockReservationIdStockLineItem", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockReservationId interface{}

		httpRes, err := apiClient.HasOneApi.GETStockReservationIdStockLineItem(context.Background(), stockReservationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETStockReservationIdStockTransfer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockReservationId interface{}

		httpRes, err := apiClient.HasOneApi.GETStockReservationIdStockTransfer(context.Background(), stockReservationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETStockTransferIdDestinationStockLocation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockTransferId interface{}

		httpRes, err := apiClient.HasOneApi.GETStockTransferIdDestinationStockLocation(context.Background(), stockTransferId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETStockTransferIdLineItem", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockTransferId interface{}

		httpRes, err := apiClient.HasOneApi.GETStockTransferIdLineItem(context.Background(), stockTransferId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETStockTransferIdOriginStockLocation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockTransferId interface{}

		httpRes, err := apiClient.HasOneApi.GETStockTransferIdOriginStockLocation(context.Background(), stockTransferId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETStockTransferIdShipment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockTransferId interface{}

		httpRes, err := apiClient.HasOneApi.GETStockTransferIdShipment(context.Background(), stockTransferId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETStockTransferIdSku", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockTransferId interface{}

		httpRes, err := apiClient.HasOneApi.GETStockTransferIdSku(context.Background(), stockTransferId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETStockTransferIdStockReservation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockTransferId interface{}

		httpRes, err := apiClient.HasOneApi.GETStockTransferIdStockReservation(context.Background(), stockTransferId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETStoreIdMarket", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var storeId interface{}

		httpRes, err := apiClient.HasOneApi.GETStoreIdMarket(context.Background(), storeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETStoreIdMerchant", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var storeId interface{}

		httpRes, err := apiClient.HasOneApi.GETStoreIdMerchant(context.Background(), storeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETStoreIdStockLocation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var storeId interface{}

		httpRes, err := apiClient.HasOneApi.GETStoreIdStockLocation(context.Background(), storeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETStripePaymentIdOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stripePaymentId interface{}

		httpRes, err := apiClient.HasOneApi.GETStripePaymentIdOrder(context.Background(), stripePaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETStripePaymentIdPaymentGateway", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stripePaymentId interface{}

		httpRes, err := apiClient.HasOneApi.GETStripePaymentIdPaymentGateway(context.Background(), stripePaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETTaxCategoryIdSku", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var taxCategoryId interface{}

		httpRes, err := apiClient.HasOneApi.GETTaxCategoryIdSku(context.Background(), taxCategoryId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETTaxRuleIdManualTaxCalculator", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var taxRuleId interface{}

		httpRes, err := apiClient.HasOneApi.GETTaxRuleIdManualTaxCalculator(context.Background(), taxRuleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETTransactionIdOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var transactionId interface{}

		httpRes, err := apiClient.HasOneApi.GETTransactionIdOrder(context.Background(), transactionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETVoidIdOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var voidId interface{}

		httpRes, err := apiClient.HasOneApi.GETVoidIdOrder(context.Background(), voidId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETVoidIdReferenceAuthorization", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var voidId interface{}

		httpRes, err := apiClient.HasOneApi.GETVoidIdReferenceAuthorization(context.Background(), voidId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasOneApiService GETWireTransferIdOrder", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var wireTransferId interface{}

		httpRes, err := apiClient.HasOneApi.GETWireTransferIdOrder(context.Background(), wireTransferId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
