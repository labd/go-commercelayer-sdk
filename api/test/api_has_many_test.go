/*
Commerce Layer API

Testing HasManyApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	openapiclient "github.com/incentro-dc/go-commercelayer-sdk/api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_api_HasManyApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test HasManyApiService GETAddressIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var addressId interface{}

		httpRes, err := apiClient.HasManyApi.GETAddressIdEvents(context.Background(), addressId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETAddressIdTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var addressId interface{}

		httpRes, err := apiClient.HasManyApi.GETAddressIdTags(context.Background(), addressId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETAddressIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var addressId interface{}

		httpRes, err := apiClient.HasManyApi.GETAddressIdVersions(context.Background(), addressId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETAdjustmentIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var adjustmentId interface{}

		httpRes, err := apiClient.HasManyApi.GETAdjustmentIdVersions(context.Background(), adjustmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETAdyenGatewayIdAdyenPayments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var adyenGatewayId interface{}

		httpRes, err := apiClient.HasManyApi.GETAdyenGatewayIdAdyenPayments(context.Background(), adyenGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETAdyenGatewayIdPaymentMethods", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var adyenGatewayId interface{}

		httpRes, err := apiClient.HasManyApi.GETAdyenGatewayIdPaymentMethods(context.Background(), adyenGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETAdyenGatewayIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var adyenGatewayId interface{}

		httpRes, err := apiClient.HasManyApi.GETAdyenGatewayIdVersions(context.Background(), adyenGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETAdyenPaymentIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var adyenPaymentId interface{}

		httpRes, err := apiClient.HasManyApi.GETAdyenPaymentIdVersions(context.Background(), adyenPaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETAuthorizationIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var authorizationId interface{}

		httpRes, err := apiClient.HasManyApi.GETAuthorizationIdAttachments(context.Background(), authorizationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETAuthorizationIdCaptures", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var authorizationId interface{}

		httpRes, err := apiClient.HasManyApi.GETAuthorizationIdCaptures(context.Background(), authorizationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETAuthorizationIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var authorizationId interface{}

		httpRes, err := apiClient.HasManyApi.GETAuthorizationIdEvents(context.Background(), authorizationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETAuthorizationIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var authorizationId interface{}

		httpRes, err := apiClient.HasManyApi.GETAuthorizationIdVersions(context.Background(), authorizationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETAuthorizationIdVoids", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var authorizationId interface{}

		httpRes, err := apiClient.HasManyApi.GETAuthorizationIdVoids(context.Background(), authorizationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETAvalaraAccountIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var avalaraAccountId interface{}

		httpRes, err := apiClient.HasManyApi.GETAvalaraAccountIdAttachments(context.Background(), avalaraAccountId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETAvalaraAccountIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var avalaraAccountId interface{}

		httpRes, err := apiClient.HasManyApi.GETAvalaraAccountIdEvents(context.Background(), avalaraAccountId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETAvalaraAccountIdMarkets", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var avalaraAccountId interface{}

		httpRes, err := apiClient.HasManyApi.GETAvalaraAccountIdMarkets(context.Background(), avalaraAccountId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETAvalaraAccountIdTaxCategories", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var avalaraAccountId interface{}

		httpRes, err := apiClient.HasManyApi.GETAvalaraAccountIdTaxCategories(context.Background(), avalaraAccountId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETAvalaraAccountIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var avalaraAccountId interface{}

		httpRes, err := apiClient.HasManyApi.GETAvalaraAccountIdVersions(context.Background(), avalaraAccountId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETAxerveGatewayIdAxervePayments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var axerveGatewayId interface{}

		httpRes, err := apiClient.HasManyApi.GETAxerveGatewayIdAxervePayments(context.Background(), axerveGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETAxerveGatewayIdPaymentMethods", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var axerveGatewayId interface{}

		httpRes, err := apiClient.HasManyApi.GETAxerveGatewayIdPaymentMethods(context.Background(), axerveGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETAxerveGatewayIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var axerveGatewayId interface{}

		httpRes, err := apiClient.HasManyApi.GETAxerveGatewayIdVersions(context.Background(), axerveGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETAxervePaymentIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var axervePaymentId interface{}

		httpRes, err := apiClient.HasManyApi.GETAxervePaymentIdVersions(context.Background(), axervePaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETBingGeocoderIdAddresses", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var bingGeocoderId interface{}

		httpRes, err := apiClient.HasManyApi.GETBingGeocoderIdAddresses(context.Background(), bingGeocoderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETBingGeocoderIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var bingGeocoderId interface{}

		httpRes, err := apiClient.HasManyApi.GETBingGeocoderIdAttachments(context.Background(), bingGeocoderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETBingGeocoderIdMarkets", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var bingGeocoderId interface{}

		httpRes, err := apiClient.HasManyApi.GETBingGeocoderIdMarkets(context.Background(), bingGeocoderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETBraintreeGatewayIdBraintreePayments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var braintreeGatewayId interface{}

		httpRes, err := apiClient.HasManyApi.GETBraintreeGatewayIdBraintreePayments(context.Background(), braintreeGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETBraintreeGatewayIdPaymentMethods", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var braintreeGatewayId interface{}

		httpRes, err := apiClient.HasManyApi.GETBraintreeGatewayIdPaymentMethods(context.Background(), braintreeGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETBraintreeGatewayIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var braintreeGatewayId interface{}

		httpRes, err := apiClient.HasManyApi.GETBraintreeGatewayIdVersions(context.Background(), braintreeGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETBraintreePaymentIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var braintreePaymentId interface{}

		httpRes, err := apiClient.HasManyApi.GETBraintreePaymentIdVersions(context.Background(), braintreePaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETBundleIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var bundleId interface{}

		httpRes, err := apiClient.HasManyApi.GETBundleIdAttachments(context.Background(), bundleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETBundleIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var bundleId interface{}

		httpRes, err := apiClient.HasManyApi.GETBundleIdEvents(context.Background(), bundleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETBundleIdSkus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var bundleId interface{}

		httpRes, err := apiClient.HasManyApi.GETBundleIdSkus(context.Background(), bundleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETBundleIdTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var bundleId interface{}

		httpRes, err := apiClient.HasManyApi.GETBundleIdTags(context.Background(), bundleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETBundleIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var bundleId interface{}

		httpRes, err := apiClient.HasManyApi.GETBundleIdVersions(context.Background(), bundleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETBuyXPayYPromotionIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var buyXPayYPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETBuyXPayYPromotionIdAttachments(context.Background(), buyXPayYPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETBuyXPayYPromotionIdCoupons", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var buyXPayYPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETBuyXPayYPromotionIdCoupons(context.Background(), buyXPayYPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETBuyXPayYPromotionIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var buyXPayYPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETBuyXPayYPromotionIdEvents(context.Background(), buyXPayYPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETBuyXPayYPromotionIdSkus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var buyXPayYPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETBuyXPayYPromotionIdSkus(context.Background(), buyXPayYPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETBuyXPayYPromotionIdTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var buyXPayYPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETBuyXPayYPromotionIdTags(context.Background(), buyXPayYPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETBuyXPayYPromotionIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var buyXPayYPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETBuyXPayYPromotionIdVersions(context.Background(), buyXPayYPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCaptureIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var captureId interface{}

		httpRes, err := apiClient.HasManyApi.GETCaptureIdAttachments(context.Background(), captureId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCaptureIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var captureId interface{}

		httpRes, err := apiClient.HasManyApi.GETCaptureIdEvents(context.Background(), captureId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCaptureIdRefunds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var captureId interface{}

		httpRes, err := apiClient.HasManyApi.GETCaptureIdRefunds(context.Background(), captureId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCaptureIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var captureId interface{}

		httpRes, err := apiClient.HasManyApi.GETCaptureIdVersions(context.Background(), captureId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCarrierAccountIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var carrierAccountId interface{}

		httpRes, err := apiClient.HasManyApi.GETCarrierAccountIdAttachments(context.Background(), carrierAccountId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCarrierAccountIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var carrierAccountId interface{}

		httpRes, err := apiClient.HasManyApi.GETCarrierAccountIdVersions(context.Background(), carrierAccountId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCheckoutComGatewayIdCheckoutComPayments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var checkoutComGatewayId interface{}

		httpRes, err := apiClient.HasManyApi.GETCheckoutComGatewayIdCheckoutComPayments(context.Background(), checkoutComGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCheckoutComGatewayIdPaymentMethods", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var checkoutComGatewayId interface{}

		httpRes, err := apiClient.HasManyApi.GETCheckoutComGatewayIdPaymentMethods(context.Background(), checkoutComGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCheckoutComGatewayIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var checkoutComGatewayId interface{}

		httpRes, err := apiClient.HasManyApi.GETCheckoutComGatewayIdVersions(context.Background(), checkoutComGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCheckoutComPaymentIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var checkoutComPaymentId interface{}

		httpRes, err := apiClient.HasManyApi.GETCheckoutComPaymentIdVersions(context.Background(), checkoutComPaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCleanupIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var cleanupId interface{}

		httpRes, err := apiClient.HasManyApi.GETCleanupIdEvents(context.Background(), cleanupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCleanupIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var cleanupId interface{}

		httpRes, err := apiClient.HasManyApi.GETCleanupIdVersions(context.Background(), cleanupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCouponCodesPromotionRuleIdCoupons", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var couponCodesPromotionRuleId interface{}

		httpRes, err := apiClient.HasManyApi.GETCouponCodesPromotionRuleIdCoupons(context.Background(), couponCodesPromotionRuleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCouponCodesPromotionRuleIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var couponCodesPromotionRuleId interface{}

		httpRes, err := apiClient.HasManyApi.GETCouponCodesPromotionRuleIdVersions(context.Background(), couponCodesPromotionRuleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCouponIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var couponId interface{}

		httpRes, err := apiClient.HasManyApi.GETCouponIdEvents(context.Background(), couponId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCouponIdTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var couponId interface{}

		httpRes, err := apiClient.HasManyApi.GETCouponIdTags(context.Background(), couponId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCouponIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var couponId interface{}

		httpRes, err := apiClient.HasManyApi.GETCouponIdVersions(context.Background(), couponId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCouponRecipientIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var couponRecipientId interface{}

		httpRes, err := apiClient.HasManyApi.GETCouponRecipientIdAttachments(context.Background(), couponRecipientId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCouponRecipientIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var couponRecipientId interface{}

		httpRes, err := apiClient.HasManyApi.GETCouponRecipientIdVersions(context.Background(), couponRecipientId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCustomPromotionRuleIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customPromotionRuleId interface{}

		httpRes, err := apiClient.HasManyApi.GETCustomPromotionRuleIdVersions(context.Background(), customPromotionRuleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCustomerAddressIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerAddressId interface{}

		httpRes, err := apiClient.HasManyApi.GETCustomerAddressIdEvents(context.Background(), customerAddressId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCustomerAddressIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerAddressId interface{}

		httpRes, err := apiClient.HasManyApi.GETCustomerAddressIdVersions(context.Background(), customerAddressId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCustomerGroupIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerGroupId interface{}

		httpRes, err := apiClient.HasManyApi.GETCustomerGroupIdAttachments(context.Background(), customerGroupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCustomerGroupIdCustomers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerGroupId interface{}

		httpRes, err := apiClient.HasManyApi.GETCustomerGroupIdCustomers(context.Background(), customerGroupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCustomerGroupIdMarkets", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerGroupId interface{}

		httpRes, err := apiClient.HasManyApi.GETCustomerGroupIdMarkets(context.Background(), customerGroupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCustomerGroupIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerGroupId interface{}

		httpRes, err := apiClient.HasManyApi.GETCustomerGroupIdVersions(context.Background(), customerGroupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCustomerIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId interface{}

		httpRes, err := apiClient.HasManyApi.GETCustomerIdAttachments(context.Background(), customerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCustomerIdCustomerAddresses", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId interface{}

		httpRes, err := apiClient.HasManyApi.GETCustomerIdCustomerAddresses(context.Background(), customerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCustomerIdCustomerPaymentSources", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId interface{}

		httpRes, err := apiClient.HasManyApi.GETCustomerIdCustomerPaymentSources(context.Background(), customerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCustomerIdCustomerSubscriptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId interface{}

		httpRes, err := apiClient.HasManyApi.GETCustomerIdCustomerSubscriptions(context.Background(), customerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCustomerIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId interface{}

		httpRes, err := apiClient.HasManyApi.GETCustomerIdEvents(context.Background(), customerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCustomerIdOrderSubscriptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId interface{}

		httpRes, err := apiClient.HasManyApi.GETCustomerIdOrderSubscriptions(context.Background(), customerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCustomerIdOrders", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId interface{}

		httpRes, err := apiClient.HasManyApi.GETCustomerIdOrders(context.Background(), customerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCustomerIdReturns", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId interface{}

		httpRes, err := apiClient.HasManyApi.GETCustomerIdReturns(context.Background(), customerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCustomerIdSkuLists", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId interface{}

		httpRes, err := apiClient.HasManyApi.GETCustomerIdSkuLists(context.Background(), customerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCustomerIdTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerId interface{}

		httpRes, err := apiClient.HasManyApi.GETCustomerIdTags(context.Background(), customerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCustomerPasswordResetIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerPasswordResetId interface{}

		httpRes, err := apiClient.HasManyApi.GETCustomerPasswordResetIdEvents(context.Background(), customerPasswordResetId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCustomerPaymentSourceIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerPaymentSourceId interface{}

		httpRes, err := apiClient.HasManyApi.GETCustomerPaymentSourceIdVersions(context.Background(), customerPaymentSourceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCustomerSubscriptionIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerSubscriptionId interface{}

		httpRes, err := apiClient.HasManyApi.GETCustomerSubscriptionIdEvents(context.Background(), customerSubscriptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETCustomerSubscriptionIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var customerSubscriptionId interface{}

		httpRes, err := apiClient.HasManyApi.GETCustomerSubscriptionIdVersions(context.Background(), customerSubscriptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETDeliveryLeadTimeIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deliveryLeadTimeId interface{}

		httpRes, err := apiClient.HasManyApi.GETDeliveryLeadTimeIdAttachments(context.Background(), deliveryLeadTimeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETDeliveryLeadTimeIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var deliveryLeadTimeId interface{}

		httpRes, err := apiClient.HasManyApi.GETDeliveryLeadTimeIdVersions(context.Background(), deliveryLeadTimeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETEventIdLastEventCallbacks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var eventId interface{}

		httpRes, err := apiClient.HasManyApi.GETEventIdLastEventCallbacks(context.Background(), eventId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETEventIdWebhooks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var eventId interface{}

		httpRes, err := apiClient.HasManyApi.GETEventIdWebhooks(context.Background(), eventId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETExportIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var exportId interface{}

		httpRes, err := apiClient.HasManyApi.GETExportIdEvents(context.Background(), exportId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETExternalGatewayIdExternalPayments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var externalGatewayId interface{}

		httpRes, err := apiClient.HasManyApi.GETExternalGatewayIdExternalPayments(context.Background(), externalGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETExternalGatewayIdPaymentMethods", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var externalGatewayId interface{}

		httpRes, err := apiClient.HasManyApi.GETExternalGatewayIdPaymentMethods(context.Background(), externalGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETExternalGatewayIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var externalGatewayId interface{}

		httpRes, err := apiClient.HasManyApi.GETExternalGatewayIdVersions(context.Background(), externalGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETExternalPaymentIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var externalPaymentId interface{}

		httpRes, err := apiClient.HasManyApi.GETExternalPaymentIdVersions(context.Background(), externalPaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETExternalPromotionIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var externalPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETExternalPromotionIdAttachments(context.Background(), externalPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETExternalPromotionIdCoupons", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var externalPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETExternalPromotionIdCoupons(context.Background(), externalPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETExternalPromotionIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var externalPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETExternalPromotionIdEvents(context.Background(), externalPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETExternalPromotionIdSkus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var externalPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETExternalPromotionIdSkus(context.Background(), externalPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETExternalPromotionIdTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var externalPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETExternalPromotionIdTags(context.Background(), externalPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETExternalPromotionIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var externalPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETExternalPromotionIdVersions(context.Background(), externalPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETExternalTaxCalculatorIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var externalTaxCalculatorId interface{}

		httpRes, err := apiClient.HasManyApi.GETExternalTaxCalculatorIdAttachments(context.Background(), externalTaxCalculatorId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETExternalTaxCalculatorIdMarkets", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var externalTaxCalculatorId interface{}

		httpRes, err := apiClient.HasManyApi.GETExternalTaxCalculatorIdMarkets(context.Background(), externalTaxCalculatorId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETExternalTaxCalculatorIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var externalTaxCalculatorId interface{}

		httpRes, err := apiClient.HasManyApi.GETExternalTaxCalculatorIdVersions(context.Background(), externalTaxCalculatorId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETFixedAmountPromotionIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fixedAmountPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETFixedAmountPromotionIdAttachments(context.Background(), fixedAmountPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETFixedAmountPromotionIdCoupons", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fixedAmountPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETFixedAmountPromotionIdCoupons(context.Background(), fixedAmountPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETFixedAmountPromotionIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fixedAmountPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETFixedAmountPromotionIdEvents(context.Background(), fixedAmountPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETFixedAmountPromotionIdSkus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fixedAmountPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETFixedAmountPromotionIdSkus(context.Background(), fixedAmountPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETFixedAmountPromotionIdTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fixedAmountPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETFixedAmountPromotionIdTags(context.Background(), fixedAmountPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETFixedAmountPromotionIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fixedAmountPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETFixedAmountPromotionIdVersions(context.Background(), fixedAmountPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETFixedPricePromotionIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fixedPricePromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETFixedPricePromotionIdAttachments(context.Background(), fixedPricePromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETFixedPricePromotionIdCoupons", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fixedPricePromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETFixedPricePromotionIdCoupons(context.Background(), fixedPricePromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETFixedPricePromotionIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fixedPricePromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETFixedPricePromotionIdEvents(context.Background(), fixedPricePromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETFixedPricePromotionIdSkus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fixedPricePromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETFixedPricePromotionIdSkus(context.Background(), fixedPricePromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETFixedPricePromotionIdTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fixedPricePromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETFixedPricePromotionIdTags(context.Background(), fixedPricePromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETFixedPricePromotionIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fixedPricePromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETFixedPricePromotionIdVersions(context.Background(), fixedPricePromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETFlexPromotionIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var flexPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETFlexPromotionIdAttachments(context.Background(), flexPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETFlexPromotionIdCoupons", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var flexPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETFlexPromotionIdCoupons(context.Background(), flexPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETFlexPromotionIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var flexPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETFlexPromotionIdEvents(context.Background(), flexPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETFlexPromotionIdTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var flexPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETFlexPromotionIdTags(context.Background(), flexPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETFlexPromotionIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var flexPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETFlexPromotionIdVersions(context.Background(), flexPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETFreeGiftPromotionIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var freeGiftPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETFreeGiftPromotionIdAttachments(context.Background(), freeGiftPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETFreeGiftPromotionIdCoupons", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var freeGiftPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETFreeGiftPromotionIdCoupons(context.Background(), freeGiftPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETFreeGiftPromotionIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var freeGiftPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETFreeGiftPromotionIdEvents(context.Background(), freeGiftPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETFreeGiftPromotionIdSkus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var freeGiftPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETFreeGiftPromotionIdSkus(context.Background(), freeGiftPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETFreeGiftPromotionIdTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var freeGiftPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETFreeGiftPromotionIdTags(context.Background(), freeGiftPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETFreeGiftPromotionIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var freeGiftPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETFreeGiftPromotionIdVersions(context.Background(), freeGiftPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETFreeShippingPromotionIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var freeShippingPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETFreeShippingPromotionIdAttachments(context.Background(), freeShippingPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETFreeShippingPromotionIdCoupons", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var freeShippingPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETFreeShippingPromotionIdCoupons(context.Background(), freeShippingPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETFreeShippingPromotionIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var freeShippingPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETFreeShippingPromotionIdEvents(context.Background(), freeShippingPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETFreeShippingPromotionIdTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var freeShippingPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETFreeShippingPromotionIdTags(context.Background(), freeShippingPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETFreeShippingPromotionIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var freeShippingPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETFreeShippingPromotionIdVersions(context.Background(), freeShippingPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETGeocoderIdAddresses", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var geocoderId interface{}

		httpRes, err := apiClient.HasManyApi.GETGeocoderIdAddresses(context.Background(), geocoderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETGeocoderIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var geocoderId interface{}

		httpRes, err := apiClient.HasManyApi.GETGeocoderIdAttachments(context.Background(), geocoderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETGeocoderIdMarkets", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var geocoderId interface{}

		httpRes, err := apiClient.HasManyApi.GETGeocoderIdMarkets(context.Background(), geocoderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETGiftCardIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var giftCardId interface{}

		httpRes, err := apiClient.HasManyApi.GETGiftCardIdAttachments(context.Background(), giftCardId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETGiftCardIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var giftCardId interface{}

		httpRes, err := apiClient.HasManyApi.GETGiftCardIdEvents(context.Background(), giftCardId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETGiftCardIdTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var giftCardId interface{}

		httpRes, err := apiClient.HasManyApi.GETGiftCardIdTags(context.Background(), giftCardId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETGiftCardIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var giftCardId interface{}

		httpRes, err := apiClient.HasManyApi.GETGiftCardIdVersions(context.Background(), giftCardId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETGiftCardRecipientIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var giftCardRecipientId interface{}

		httpRes, err := apiClient.HasManyApi.GETGiftCardRecipientIdAttachments(context.Background(), giftCardRecipientId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETGiftCardRecipientIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var giftCardRecipientId interface{}

		httpRes, err := apiClient.HasManyApi.GETGiftCardRecipientIdVersions(context.Background(), giftCardRecipientId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETGoogleGeocoderIdAddresses", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var googleGeocoderId interface{}

		httpRes, err := apiClient.HasManyApi.GETGoogleGeocoderIdAddresses(context.Background(), googleGeocoderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETGoogleGeocoderIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var googleGeocoderId interface{}

		httpRes, err := apiClient.HasManyApi.GETGoogleGeocoderIdAttachments(context.Background(), googleGeocoderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETGoogleGeocoderIdMarkets", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var googleGeocoderId interface{}

		httpRes, err := apiClient.HasManyApi.GETGoogleGeocoderIdMarkets(context.Background(), googleGeocoderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETImportIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var importId interface{}

		httpRes, err := apiClient.HasManyApi.GETImportIdEvents(context.Background(), importId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETInStockSubscriptionIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var inStockSubscriptionId interface{}

		httpRes, err := apiClient.HasManyApi.GETInStockSubscriptionIdEvents(context.Background(), inStockSubscriptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETInStockSubscriptionIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var inStockSubscriptionId interface{}

		httpRes, err := apiClient.HasManyApi.GETInStockSubscriptionIdVersions(context.Background(), inStockSubscriptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETInventoryModelIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var inventoryModelId interface{}

		httpRes, err := apiClient.HasManyApi.GETInventoryModelIdAttachments(context.Background(), inventoryModelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETInventoryModelIdInventoryReturnLocations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var inventoryModelId interface{}

		httpRes, err := apiClient.HasManyApi.GETInventoryModelIdInventoryReturnLocations(context.Background(), inventoryModelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETInventoryModelIdInventoryStockLocations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var inventoryModelId interface{}

		httpRes, err := apiClient.HasManyApi.GETInventoryModelIdInventoryStockLocations(context.Background(), inventoryModelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETInventoryModelIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var inventoryModelId interface{}

		httpRes, err := apiClient.HasManyApi.GETInventoryModelIdVersions(context.Background(), inventoryModelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETInventoryReturnLocationIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var inventoryReturnLocationId interface{}

		httpRes, err := apiClient.HasManyApi.GETInventoryReturnLocationIdVersions(context.Background(), inventoryReturnLocationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETInventoryStockLocationIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var inventoryStockLocationId interface{}

		httpRes, err := apiClient.HasManyApi.GETInventoryStockLocationIdVersions(context.Background(), inventoryStockLocationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETKlarnaGatewayIdKlarnaPayments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var klarnaGatewayId interface{}

		httpRes, err := apiClient.HasManyApi.GETKlarnaGatewayIdKlarnaPayments(context.Background(), klarnaGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETKlarnaGatewayIdPaymentMethods", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var klarnaGatewayId interface{}

		httpRes, err := apiClient.HasManyApi.GETKlarnaGatewayIdPaymentMethods(context.Background(), klarnaGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETKlarnaGatewayIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var klarnaGatewayId interface{}

		httpRes, err := apiClient.HasManyApi.GETKlarnaGatewayIdVersions(context.Background(), klarnaGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETKlarnaPaymentIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var klarnaPaymentId interface{}

		httpRes, err := apiClient.HasManyApi.GETKlarnaPaymentIdVersions(context.Background(), klarnaPaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETLineItemIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineItemId interface{}

		httpRes, err := apiClient.HasManyApi.GETLineItemIdEvents(context.Background(), lineItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETLineItemIdLineItemOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineItemId interface{}

		httpRes, err := apiClient.HasManyApi.GETLineItemIdLineItemOptions(context.Background(), lineItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETLineItemIdNotifications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineItemId interface{}

		httpRes, err := apiClient.HasManyApi.GETLineItemIdNotifications(context.Background(), lineItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETLineItemIdReturnLineItems", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineItemId interface{}

		httpRes, err := apiClient.HasManyApi.GETLineItemIdReturnLineItems(context.Background(), lineItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETLineItemIdStockLineItems", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineItemId interface{}

		httpRes, err := apiClient.HasManyApi.GETLineItemIdStockLineItems(context.Background(), lineItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETLineItemIdStockReservations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineItemId interface{}

		httpRes, err := apiClient.HasManyApi.GETLineItemIdStockReservations(context.Background(), lineItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETLineItemIdStockTransfers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineItemId interface{}

		httpRes, err := apiClient.HasManyApi.GETLineItemIdStockTransfers(context.Background(), lineItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETLineItemIdTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineItemId interface{}

		httpRes, err := apiClient.HasManyApi.GETLineItemIdTags(context.Background(), lineItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETLineItemOptionIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineItemOptionId interface{}

		httpRes, err := apiClient.HasManyApi.GETLineItemOptionIdEvents(context.Background(), lineItemOptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETLineItemOptionIdTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineItemOptionId interface{}

		httpRes, err := apiClient.HasManyApi.GETLineItemOptionIdTags(context.Background(), lineItemOptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETLinkIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var linkId interface{}

		httpRes, err := apiClient.HasManyApi.GETLinkIdEvents(context.Background(), linkId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETManualGatewayIdPaymentMethods", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var manualGatewayId interface{}

		httpRes, err := apiClient.HasManyApi.GETManualGatewayIdPaymentMethods(context.Background(), manualGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETManualGatewayIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var manualGatewayId interface{}

		httpRes, err := apiClient.HasManyApi.GETManualGatewayIdVersions(context.Background(), manualGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETManualTaxCalculatorIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var manualTaxCalculatorId interface{}

		httpRes, err := apiClient.HasManyApi.GETManualTaxCalculatorIdAttachments(context.Background(), manualTaxCalculatorId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETManualTaxCalculatorIdMarkets", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var manualTaxCalculatorId interface{}

		httpRes, err := apiClient.HasManyApi.GETManualTaxCalculatorIdMarkets(context.Background(), manualTaxCalculatorId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETManualTaxCalculatorIdTaxRules", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var manualTaxCalculatorId interface{}

		httpRes, err := apiClient.HasManyApi.GETManualTaxCalculatorIdTaxRules(context.Background(), manualTaxCalculatorId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETManualTaxCalculatorIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var manualTaxCalculatorId interface{}

		httpRes, err := apiClient.HasManyApi.GETManualTaxCalculatorIdVersions(context.Background(), manualTaxCalculatorId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETMarketIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var marketId interface{}

		httpRes, err := apiClient.HasManyApi.GETMarketIdAttachments(context.Background(), marketId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETMarketIdPriceListSchedulers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var marketId interface{}

		httpRes, err := apiClient.HasManyApi.GETMarketIdPriceListSchedulers(context.Background(), marketId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETMarketIdStores", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var marketId interface{}

		httpRes, err := apiClient.HasManyApi.GETMarketIdStores(context.Background(), marketId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETMarketIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var marketId interface{}

		httpRes, err := apiClient.HasManyApi.GETMarketIdVersions(context.Background(), marketId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETMerchantIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var merchantId interface{}

		httpRes, err := apiClient.HasManyApi.GETMerchantIdAttachments(context.Background(), merchantId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETMerchantIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var merchantId interface{}

		httpRes, err := apiClient.HasManyApi.GETMerchantIdVersions(context.Background(), merchantId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderAmountPromotionRuleIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderAmountPromotionRuleId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderAmountPromotionRuleIdVersions(context.Background(), orderAmountPromotionRuleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderCopyIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderCopyId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderCopyIdEvents(context.Background(), orderCopyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderFactoryIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderFactoryId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderFactoryIdEvents(context.Background(), orderFactoryId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderIdAttachments(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderIdAuthorizations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderIdAuthorizations(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderIdAvailableCustomerPaymentSources", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderIdAvailableCustomerPaymentSources(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderIdAvailableFreeBundles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderIdAvailableFreeBundles(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderIdAvailableFreeSkus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderIdAvailableFreeSkus(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderIdAvailablePaymentMethods", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderIdAvailablePaymentMethods(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderIdCaptures", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderIdCaptures(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderIdEvents(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderIdLineItemOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderIdLineItemOptions(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderIdLineItems", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderIdLineItems(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderIdLinks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderIdLinks(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderIdNotifications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderIdNotifications(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderIdOrderCopies", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderIdOrderCopies(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderIdOrderFactories", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderIdOrderFactories(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderIdOrderSubscriptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderIdOrderSubscriptions(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderIdPaymentOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderIdPaymentOptions(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderIdRecurringOrderCopies", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderIdRecurringOrderCopies(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderIdRefunds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderIdRefunds(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderIdResourceErrors", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderIdResourceErrors(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderIdReturns", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderIdReturns(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderIdShipments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderIdShipments(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderIdStockLineItems", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderIdStockLineItems(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderIdStockReservations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderIdStockReservations(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderIdStockTransfers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderIdStockTransfers(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderIdTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderIdTags(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderIdVersions(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderIdVoids", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderIdVoids(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderSubscriptionIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderSubscriptionId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderSubscriptionIdEvents(context.Background(), orderSubscriptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderSubscriptionIdOrderFactories", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderSubscriptionId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderSubscriptionIdOrderFactories(context.Background(), orderSubscriptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderSubscriptionIdOrderSubscriptionItems", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderSubscriptionId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderSubscriptionIdOrderSubscriptionItems(context.Background(), orderSubscriptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderSubscriptionIdOrders", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderSubscriptionId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderSubscriptionIdOrders(context.Background(), orderSubscriptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderSubscriptionIdRecurringOrderCopies", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderSubscriptionId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderSubscriptionIdRecurringOrderCopies(context.Background(), orderSubscriptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderSubscriptionIdTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderSubscriptionId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderSubscriptionIdTags(context.Background(), orderSubscriptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETOrderSubscriptionIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderSubscriptionId interface{}

		httpRes, err := apiClient.HasManyApi.GETOrderSubscriptionIdVersions(context.Background(), orderSubscriptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPackageIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var packageId interface{}

		httpRes, err := apiClient.HasManyApi.GETPackageIdAttachments(context.Background(), packageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPackageIdParcels", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var packageId interface{}

		httpRes, err := apiClient.HasManyApi.GETPackageIdParcels(context.Background(), packageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPackageIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var packageId interface{}

		httpRes, err := apiClient.HasManyApi.GETPackageIdVersions(context.Background(), packageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETParcelIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var parcelId interface{}

		httpRes, err := apiClient.HasManyApi.GETParcelIdAttachments(context.Background(), parcelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETParcelIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var parcelId interface{}

		httpRes, err := apiClient.HasManyApi.GETParcelIdEvents(context.Background(), parcelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETParcelIdParcelLineItems", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var parcelId interface{}

		httpRes, err := apiClient.HasManyApi.GETParcelIdParcelLineItems(context.Background(), parcelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETParcelIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var parcelId interface{}

		httpRes, err := apiClient.HasManyApi.GETParcelIdVersions(context.Background(), parcelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETParcelLineItemIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var parcelLineItemId interface{}

		httpRes, err := apiClient.HasManyApi.GETParcelLineItemIdVersions(context.Background(), parcelLineItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPaymentGatewayIdPaymentMethods", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var paymentGatewayId interface{}

		httpRes, err := apiClient.HasManyApi.GETPaymentGatewayIdPaymentMethods(context.Background(), paymentGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPaymentGatewayIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var paymentGatewayId interface{}

		httpRes, err := apiClient.HasManyApi.GETPaymentGatewayIdVersions(context.Background(), paymentGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPaymentMethodIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var paymentMethodId interface{}

		httpRes, err := apiClient.HasManyApi.GETPaymentMethodIdAttachments(context.Background(), paymentMethodId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPaymentMethodIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var paymentMethodId interface{}

		httpRes, err := apiClient.HasManyApi.GETPaymentMethodIdVersions(context.Background(), paymentMethodId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPaymentOptionIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var paymentOptionId interface{}

		httpRes, err := apiClient.HasManyApi.GETPaymentOptionIdAttachments(context.Background(), paymentOptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPaypalGatewayIdPaymentMethods", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var paypalGatewayId interface{}

		httpRes, err := apiClient.HasManyApi.GETPaypalGatewayIdPaymentMethods(context.Background(), paypalGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPaypalGatewayIdPaypalPayments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var paypalGatewayId interface{}

		httpRes, err := apiClient.HasManyApi.GETPaypalGatewayIdPaypalPayments(context.Background(), paypalGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPaypalGatewayIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var paypalGatewayId interface{}

		httpRes, err := apiClient.HasManyApi.GETPaypalGatewayIdVersions(context.Background(), paypalGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPaypalPaymentIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var paypalPaymentId interface{}

		httpRes, err := apiClient.HasManyApi.GETPaypalPaymentIdVersions(context.Background(), paypalPaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPercentageDiscountPromotionIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var percentageDiscountPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETPercentageDiscountPromotionIdAttachments(context.Background(), percentageDiscountPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPercentageDiscountPromotionIdCoupons", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var percentageDiscountPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETPercentageDiscountPromotionIdCoupons(context.Background(), percentageDiscountPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPercentageDiscountPromotionIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var percentageDiscountPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETPercentageDiscountPromotionIdEvents(context.Background(), percentageDiscountPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPercentageDiscountPromotionIdSkus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var percentageDiscountPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETPercentageDiscountPromotionIdSkus(context.Background(), percentageDiscountPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPercentageDiscountPromotionIdTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var percentageDiscountPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETPercentageDiscountPromotionIdTags(context.Background(), percentageDiscountPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPercentageDiscountPromotionIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var percentageDiscountPromotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETPercentageDiscountPromotionIdVersions(context.Background(), percentageDiscountPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPriceFrequencyTierIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceFrequencyTierId interface{}

		httpRes, err := apiClient.HasManyApi.GETPriceFrequencyTierIdAttachments(context.Background(), priceFrequencyTierId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPriceFrequencyTierIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceFrequencyTierId interface{}

		httpRes, err := apiClient.HasManyApi.GETPriceFrequencyTierIdEvents(context.Background(), priceFrequencyTierId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPriceFrequencyTierIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceFrequencyTierId interface{}

		httpRes, err := apiClient.HasManyApi.GETPriceFrequencyTierIdVersions(context.Background(), priceFrequencyTierId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPriceIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceId interface{}

		httpRes, err := apiClient.HasManyApi.GETPriceIdAttachments(context.Background(), priceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPriceIdJwtMarkets", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceId interface{}

		httpRes, err := apiClient.HasManyApi.GETPriceIdJwtMarkets(context.Background(), priceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPriceIdJwtStockLocations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceId interface{}

		httpRes, err := apiClient.HasManyApi.GETPriceIdJwtStockLocations(context.Background(), priceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPriceIdPriceFrequencyTiers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceId interface{}

		httpRes, err := apiClient.HasManyApi.GETPriceIdPriceFrequencyTiers(context.Background(), priceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPriceIdPriceTiers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceId interface{}

		httpRes, err := apiClient.HasManyApi.GETPriceIdPriceTiers(context.Background(), priceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPriceIdPriceVolumeTiers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceId interface{}

		httpRes, err := apiClient.HasManyApi.GETPriceIdPriceVolumeTiers(context.Background(), priceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPriceIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceId interface{}

		httpRes, err := apiClient.HasManyApi.GETPriceIdVersions(context.Background(), priceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPriceListIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceListId interface{}

		httpRes, err := apiClient.HasManyApi.GETPriceListIdAttachments(context.Background(), priceListId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPriceListIdPriceListSchedulers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceListId interface{}

		httpRes, err := apiClient.HasManyApi.GETPriceListIdPriceListSchedulers(context.Background(), priceListId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPriceListIdPrices", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceListId interface{}

		httpRes, err := apiClient.HasManyApi.GETPriceListIdPrices(context.Background(), priceListId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPriceListIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceListId interface{}

		httpRes, err := apiClient.HasManyApi.GETPriceListIdVersions(context.Background(), priceListId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPriceListSchedulerIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceListSchedulerId interface{}

		httpRes, err := apiClient.HasManyApi.GETPriceListSchedulerIdEvents(context.Background(), priceListSchedulerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPriceListSchedulerIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceListSchedulerId interface{}

		httpRes, err := apiClient.HasManyApi.GETPriceListSchedulerIdVersions(context.Background(), priceListSchedulerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPriceTierIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceTierId interface{}

		httpRes, err := apiClient.HasManyApi.GETPriceTierIdAttachments(context.Background(), priceTierId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPriceTierIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceTierId interface{}

		httpRes, err := apiClient.HasManyApi.GETPriceTierIdVersions(context.Background(), priceTierId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPriceVolumeTierIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceVolumeTierId interface{}

		httpRes, err := apiClient.HasManyApi.GETPriceVolumeTierIdAttachments(context.Background(), priceVolumeTierId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPriceVolumeTierIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceVolumeTierId interface{}

		httpRes, err := apiClient.HasManyApi.GETPriceVolumeTierIdEvents(context.Background(), priceVolumeTierId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPriceVolumeTierIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceVolumeTierId interface{}

		httpRes, err := apiClient.HasManyApi.GETPriceVolumeTierIdVersions(context.Background(), priceVolumeTierId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPromotionIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var promotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETPromotionIdAttachments(context.Background(), promotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPromotionIdCoupons", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var promotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETPromotionIdCoupons(context.Background(), promotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPromotionIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var promotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETPromotionIdEvents(context.Background(), promotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPromotionIdTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var promotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETPromotionIdTags(context.Background(), promotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPromotionIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var promotionId interface{}

		httpRes, err := apiClient.HasManyApi.GETPromotionIdVersions(context.Background(), promotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETPromotionRuleIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var promotionRuleId interface{}

		httpRes, err := apiClient.HasManyApi.GETPromotionRuleIdVersions(context.Background(), promotionRuleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETRecurringOrderCopyIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var recurringOrderCopyId interface{}

		httpRes, err := apiClient.HasManyApi.GETRecurringOrderCopyIdEvents(context.Background(), recurringOrderCopyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETRefundIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var refundId interface{}

		httpRes, err := apiClient.HasManyApi.GETRefundIdAttachments(context.Background(), refundId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETRefundIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var refundId interface{}

		httpRes, err := apiClient.HasManyApi.GETRefundIdEvents(context.Background(), refundId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETRefundIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var refundId interface{}

		httpRes, err := apiClient.HasManyApi.GETRefundIdVersions(context.Background(), refundId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETReservedStockIdStockReservations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var reservedStockId interface{}

		httpRes, err := apiClient.HasManyApi.GETReservedStockIdStockReservations(context.Background(), reservedStockId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETReservedStockIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var reservedStockId interface{}

		httpRes, err := apiClient.HasManyApi.GETReservedStockIdVersions(context.Background(), reservedStockId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETReturnIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var returnId interface{}

		httpRes, err := apiClient.HasManyApi.GETReturnIdAttachments(context.Background(), returnId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETReturnIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var returnId interface{}

		httpRes, err := apiClient.HasManyApi.GETReturnIdEvents(context.Background(), returnId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETReturnIdResourceErrors", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var returnId interface{}

		httpRes, err := apiClient.HasManyApi.GETReturnIdResourceErrors(context.Background(), returnId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETReturnIdReturnLineItems", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var returnId interface{}

		httpRes, err := apiClient.HasManyApi.GETReturnIdReturnLineItems(context.Background(), returnId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETReturnIdTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var returnId interface{}

		httpRes, err := apiClient.HasManyApi.GETReturnIdTags(context.Background(), returnId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETReturnIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var returnId interface{}

		httpRes, err := apiClient.HasManyApi.GETReturnIdVersions(context.Background(), returnId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSatispayGatewayIdPaymentMethods", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var satispayGatewayId interface{}

		httpRes, err := apiClient.HasManyApi.GETSatispayGatewayIdPaymentMethods(context.Background(), satispayGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSatispayGatewayIdSatispayPayments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var satispayGatewayId interface{}

		httpRes, err := apiClient.HasManyApi.GETSatispayGatewayIdSatispayPayments(context.Background(), satispayGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSatispayGatewayIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var satispayGatewayId interface{}

		httpRes, err := apiClient.HasManyApi.GETSatispayGatewayIdVersions(context.Background(), satispayGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSatispayPaymentIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var satispayPaymentId interface{}

		httpRes, err := apiClient.HasManyApi.GETSatispayPaymentIdVersions(context.Background(), satispayPaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETShipmentIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shipmentId interface{}

		httpRes, err := apiClient.HasManyApi.GETShipmentIdAttachments(context.Background(), shipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETShipmentIdAvailableShippingMethods", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shipmentId interface{}

		httpRes, err := apiClient.HasManyApi.GETShipmentIdAvailableShippingMethods(context.Background(), shipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETShipmentIdCarrierAccounts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shipmentId interface{}

		httpRes, err := apiClient.HasManyApi.GETShipmentIdCarrierAccounts(context.Background(), shipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETShipmentIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shipmentId interface{}

		httpRes, err := apiClient.HasManyApi.GETShipmentIdEvents(context.Background(), shipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETShipmentIdLineItems", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shipmentId interface{}

		httpRes, err := apiClient.HasManyApi.GETShipmentIdLineItems(context.Background(), shipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETShipmentIdParcels", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shipmentId interface{}

		httpRes, err := apiClient.HasManyApi.GETShipmentIdParcels(context.Background(), shipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETShipmentIdStockLineItems", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shipmentId interface{}

		httpRes, err := apiClient.HasManyApi.GETShipmentIdStockLineItems(context.Background(), shipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETShipmentIdStockTransfers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shipmentId interface{}

		httpRes, err := apiClient.HasManyApi.GETShipmentIdStockTransfers(context.Background(), shipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETShipmentIdTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shipmentId interface{}

		httpRes, err := apiClient.HasManyApi.GETShipmentIdTags(context.Background(), shipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETShipmentIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shipmentId interface{}

		httpRes, err := apiClient.HasManyApi.GETShipmentIdVersions(context.Background(), shipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETShippingCategoryIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shippingCategoryId interface{}

		httpRes, err := apiClient.HasManyApi.GETShippingCategoryIdAttachments(context.Background(), shippingCategoryId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETShippingCategoryIdSkus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shippingCategoryId interface{}

		httpRes, err := apiClient.HasManyApi.GETShippingCategoryIdSkus(context.Background(), shippingCategoryId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETShippingCategoryIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shippingCategoryId interface{}

		httpRes, err := apiClient.HasManyApi.GETShippingCategoryIdVersions(context.Background(), shippingCategoryId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETShippingMethodIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shippingMethodId interface{}

		httpRes, err := apiClient.HasManyApi.GETShippingMethodIdAttachments(context.Background(), shippingMethodId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETShippingMethodIdShippingMethodTiers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shippingMethodId interface{}

		httpRes, err := apiClient.HasManyApi.GETShippingMethodIdShippingMethodTiers(context.Background(), shippingMethodId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETShippingMethodIdShippingWeightTiers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shippingMethodId interface{}

		httpRes, err := apiClient.HasManyApi.GETShippingMethodIdShippingWeightTiers(context.Background(), shippingMethodId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETShippingMethodIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shippingMethodId interface{}

		httpRes, err := apiClient.HasManyApi.GETShippingMethodIdVersions(context.Background(), shippingMethodId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETShippingMethodTierIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shippingMethodTierId interface{}

		httpRes, err := apiClient.HasManyApi.GETShippingMethodTierIdAttachments(context.Background(), shippingMethodTierId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETShippingMethodTierIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shippingMethodTierId interface{}

		httpRes, err := apiClient.HasManyApi.GETShippingMethodTierIdVersions(context.Background(), shippingMethodTierId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETShippingWeightTierIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shippingWeightTierId interface{}

		httpRes, err := apiClient.HasManyApi.GETShippingWeightTierIdAttachments(context.Background(), shippingWeightTierId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETShippingWeightTierIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shippingWeightTierId interface{}

		httpRes, err := apiClient.HasManyApi.GETShippingWeightTierIdVersions(context.Background(), shippingWeightTierId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETShippingZoneIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shippingZoneId interface{}

		httpRes, err := apiClient.HasManyApi.GETShippingZoneIdAttachments(context.Background(), shippingZoneId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETShippingZoneIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shippingZoneId interface{}

		httpRes, err := apiClient.HasManyApi.GETShippingZoneIdVersions(context.Background(), shippingZoneId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSkuIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuId interface{}

		httpRes, err := apiClient.HasManyApi.GETSkuIdAttachments(context.Background(), skuId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSkuIdDeliveryLeadTimes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuId interface{}

		httpRes, err := apiClient.HasManyApi.GETSkuIdDeliveryLeadTimes(context.Background(), skuId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSkuIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuId interface{}

		httpRes, err := apiClient.HasManyApi.GETSkuIdEvents(context.Background(), skuId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSkuIdJwtMarkets", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuId interface{}

		httpRes, err := apiClient.HasManyApi.GETSkuIdJwtMarkets(context.Background(), skuId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSkuIdJwtStockLocations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuId interface{}

		httpRes, err := apiClient.HasManyApi.GETSkuIdJwtStockLocations(context.Background(), skuId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSkuIdLinks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuId interface{}

		httpRes, err := apiClient.HasManyApi.GETSkuIdLinks(context.Background(), skuId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSkuIdPrices", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuId interface{}

		httpRes, err := apiClient.HasManyApi.GETSkuIdPrices(context.Background(), skuId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSkuIdSkuListItems", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuId interface{}

		httpRes, err := apiClient.HasManyApi.GETSkuIdSkuListItems(context.Background(), skuId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSkuIdSkuLists", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuId interface{}

		httpRes, err := apiClient.HasManyApi.GETSkuIdSkuLists(context.Background(), skuId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSkuIdSkuOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuId interface{}

		httpRes, err := apiClient.HasManyApi.GETSkuIdSkuOptions(context.Background(), skuId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSkuIdStockItems", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuId interface{}

		httpRes, err := apiClient.HasManyApi.GETSkuIdStockItems(context.Background(), skuId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSkuIdStockReservations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuId interface{}

		httpRes, err := apiClient.HasManyApi.GETSkuIdStockReservations(context.Background(), skuId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSkuIdTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuId interface{}

		httpRes, err := apiClient.HasManyApi.GETSkuIdTags(context.Background(), skuId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSkuIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuId interface{}

		httpRes, err := apiClient.HasManyApi.GETSkuIdVersions(context.Background(), skuId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSkuListIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuListId interface{}

		httpRes, err := apiClient.HasManyApi.GETSkuListIdAttachments(context.Background(), skuListId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSkuListIdBundles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuListId interface{}

		httpRes, err := apiClient.HasManyApi.GETSkuListIdBundles(context.Background(), skuListId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSkuListIdLinks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuListId interface{}

		httpRes, err := apiClient.HasManyApi.GETSkuListIdLinks(context.Background(), skuListId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSkuListIdSkuListItems", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuListId interface{}

		httpRes, err := apiClient.HasManyApi.GETSkuListIdSkuListItems(context.Background(), skuListId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSkuListIdSkus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuListId interface{}

		httpRes, err := apiClient.HasManyApi.GETSkuListIdSkus(context.Background(), skuListId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSkuListIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuListId interface{}

		httpRes, err := apiClient.HasManyApi.GETSkuListIdVersions(context.Background(), skuListId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSkuListItemIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuListItemId interface{}

		httpRes, err := apiClient.HasManyApi.GETSkuListItemIdVersions(context.Background(), skuListItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSkuListPromotionRuleIdSkus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuListPromotionRuleId interface{}

		httpRes, err := apiClient.HasManyApi.GETSkuListPromotionRuleIdSkus(context.Background(), skuListPromotionRuleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSkuListPromotionRuleIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuListPromotionRuleId interface{}

		httpRes, err := apiClient.HasManyApi.GETSkuListPromotionRuleIdVersions(context.Background(), skuListPromotionRuleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSkuOptionIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuOptionId interface{}

		httpRes, err := apiClient.HasManyApi.GETSkuOptionIdAttachments(context.Background(), skuOptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSkuOptionIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuOptionId interface{}

		httpRes, err := apiClient.HasManyApi.GETSkuOptionIdEvents(context.Background(), skuOptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSkuOptionIdTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuOptionId interface{}

		httpRes, err := apiClient.HasManyApi.GETSkuOptionIdTags(context.Background(), skuOptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSkuOptionIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuOptionId interface{}

		httpRes, err := apiClient.HasManyApi.GETSkuOptionIdVersions(context.Background(), skuOptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETStockItemIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockItemId interface{}

		httpRes, err := apiClient.HasManyApi.GETStockItemIdAttachments(context.Background(), stockItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETStockItemIdStockReservations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockItemId interface{}

		httpRes, err := apiClient.HasManyApi.GETStockItemIdStockReservations(context.Background(), stockItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETStockItemIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockItemId interface{}

		httpRes, err := apiClient.HasManyApi.GETStockItemIdVersions(context.Background(), stockItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETStockLineItemIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockLineItemId interface{}

		httpRes, err := apiClient.HasManyApi.GETStockLineItemIdVersions(context.Background(), stockLineItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETStockLocationIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockLocationId interface{}

		httpRes, err := apiClient.HasManyApi.GETStockLocationIdAttachments(context.Background(), stockLocationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETStockLocationIdInventoryReturnLocations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockLocationId interface{}

		httpRes, err := apiClient.HasManyApi.GETStockLocationIdInventoryReturnLocations(context.Background(), stockLocationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETStockLocationIdInventoryStockLocations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockLocationId interface{}

		httpRes, err := apiClient.HasManyApi.GETStockLocationIdInventoryStockLocations(context.Background(), stockLocationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETStockLocationIdStockItems", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockLocationId interface{}

		httpRes, err := apiClient.HasManyApi.GETStockLocationIdStockItems(context.Background(), stockLocationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETStockLocationIdStockTransfers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockLocationId interface{}

		httpRes, err := apiClient.HasManyApi.GETStockLocationIdStockTransfers(context.Background(), stockLocationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETStockLocationIdStores", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockLocationId interface{}

		httpRes, err := apiClient.HasManyApi.GETStockLocationIdStores(context.Background(), stockLocationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETStockLocationIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockLocationId interface{}

		httpRes, err := apiClient.HasManyApi.GETStockLocationIdVersions(context.Background(), stockLocationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETStockTransferIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockTransferId interface{}

		httpRes, err := apiClient.HasManyApi.GETStockTransferIdAttachments(context.Background(), stockTransferId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETStockTransferIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockTransferId interface{}

		httpRes, err := apiClient.HasManyApi.GETStockTransferIdEvents(context.Background(), stockTransferId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETStockTransferIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockTransferId interface{}

		httpRes, err := apiClient.HasManyApi.GETStockTransferIdVersions(context.Background(), stockTransferId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETStoreIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var storeId interface{}

		httpRes, err := apiClient.HasManyApi.GETStoreIdEvents(context.Background(), storeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETStoreIdOrders", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var storeId interface{}

		httpRes, err := apiClient.HasManyApi.GETStoreIdOrders(context.Background(), storeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETStoreIdPaymentMethods", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var storeId interface{}

		httpRes, err := apiClient.HasManyApi.GETStoreIdPaymentMethods(context.Background(), storeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETStoreIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var storeId interface{}

		httpRes, err := apiClient.HasManyApi.GETStoreIdVersions(context.Background(), storeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETStripeGatewayIdPaymentMethods", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stripeGatewayId interface{}

		httpRes, err := apiClient.HasManyApi.GETStripeGatewayIdPaymentMethods(context.Background(), stripeGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETStripeGatewayIdStripePayments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stripeGatewayId interface{}

		httpRes, err := apiClient.HasManyApi.GETStripeGatewayIdStripePayments(context.Background(), stripeGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETStripeGatewayIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stripeGatewayId interface{}

		httpRes, err := apiClient.HasManyApi.GETStripeGatewayIdVersions(context.Background(), stripeGatewayId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETStripePaymentIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stripePaymentId interface{}

		httpRes, err := apiClient.HasManyApi.GETStripePaymentIdVersions(context.Background(), stripePaymentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSubscriptionModelIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var subscriptionModelId interface{}

		httpRes, err := apiClient.HasManyApi.GETSubscriptionModelIdAttachments(context.Background(), subscriptionModelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSubscriptionModelIdMarkets", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var subscriptionModelId interface{}

		httpRes, err := apiClient.HasManyApi.GETSubscriptionModelIdMarkets(context.Background(), subscriptionModelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETSubscriptionModelIdOrderSubscriptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var subscriptionModelId interface{}

		httpRes, err := apiClient.HasManyApi.GETSubscriptionModelIdOrderSubscriptions(context.Background(), subscriptionModelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETTaxCalculatorIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var taxCalculatorId interface{}

		httpRes, err := apiClient.HasManyApi.GETTaxCalculatorIdAttachments(context.Background(), taxCalculatorId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETTaxCalculatorIdMarkets", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var taxCalculatorId interface{}

		httpRes, err := apiClient.HasManyApi.GETTaxCalculatorIdMarkets(context.Background(), taxCalculatorId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETTaxCalculatorIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var taxCalculatorId interface{}

		httpRes, err := apiClient.HasManyApi.GETTaxCalculatorIdVersions(context.Background(), taxCalculatorId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETTaxCategoryIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var taxCategoryId interface{}

		httpRes, err := apiClient.HasManyApi.GETTaxCategoryIdAttachments(context.Background(), taxCategoryId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETTaxCategoryIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var taxCategoryId interface{}

		httpRes, err := apiClient.HasManyApi.GETTaxCategoryIdVersions(context.Background(), taxCategoryId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETTaxRuleIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var taxRuleId interface{}

		httpRes, err := apiClient.HasManyApi.GETTaxRuleIdVersions(context.Background(), taxRuleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETTaxjarAccountIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var taxjarAccountId interface{}

		httpRes, err := apiClient.HasManyApi.GETTaxjarAccountIdAttachments(context.Background(), taxjarAccountId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETTaxjarAccountIdMarkets", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var taxjarAccountId interface{}

		httpRes, err := apiClient.HasManyApi.GETTaxjarAccountIdMarkets(context.Background(), taxjarAccountId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETTaxjarAccountIdTaxCategories", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var taxjarAccountId interface{}

		httpRes, err := apiClient.HasManyApi.GETTaxjarAccountIdTaxCategories(context.Background(), taxjarAccountId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETTaxjarAccountIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var taxjarAccountId interface{}

		httpRes, err := apiClient.HasManyApi.GETTaxjarAccountIdVersions(context.Background(), taxjarAccountId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETTransactionIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var transactionId interface{}

		httpRes, err := apiClient.HasManyApi.GETTransactionIdAttachments(context.Background(), transactionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETTransactionIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var transactionId interface{}

		httpRes, err := apiClient.HasManyApi.GETTransactionIdEvents(context.Background(), transactionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETTransactionIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var transactionId interface{}

		httpRes, err := apiClient.HasManyApi.GETTransactionIdVersions(context.Background(), transactionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETVoidIdAttachments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var voidId interface{}

		httpRes, err := apiClient.HasManyApi.GETVoidIdAttachments(context.Background(), voidId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETVoidIdEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var voidId interface{}

		httpRes, err := apiClient.HasManyApi.GETVoidIdEvents(context.Background(), voidId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETVoidIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var voidId interface{}

		httpRes, err := apiClient.HasManyApi.GETVoidIdVersions(context.Background(), voidId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETWebhookIdLastEventCallbacks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var webhookId interface{}

		httpRes, err := apiClient.HasManyApi.GETWebhookIdLastEventCallbacks(context.Background(), webhookId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETWebhookIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var webhookId interface{}

		httpRes, err := apiClient.HasManyApi.GETWebhookIdVersions(context.Background(), webhookId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HasManyApiService GETWireTransferIdVersions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var wireTransferId interface{}

		httpRes, err := apiClient.HasManyApi.GETWireTransferIdVersions(context.Background(), wireTransferId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
