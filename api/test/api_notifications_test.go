/*
Commerce Layer API

Testing NotificationsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	openapiclient "github.com/incentro-dc/go-commercelayer-sdk/api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_api_NotificationsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test NotificationsApiService DELETENotificationsNotificationId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var notificationId interface{}

		httpRes, err := apiClient.NotificationsApi.DELETENotificationsNotificationId(context.Background(), notificationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationsApiService GETLineItemIdNotifications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineItemId interface{}

		httpRes, err := apiClient.NotificationsApi.GETLineItemIdNotifications(context.Background(), lineItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationsApiService GETNotifications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.NotificationsApi.GETNotifications(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationsApiService GETNotificationsNotificationId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var notificationId interface{}

		resp, httpRes, err := apiClient.NotificationsApi.GETNotificationsNotificationId(context.Background(), notificationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationsApiService GETOrderIdNotifications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.NotificationsApi.GETOrderIdNotifications(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationsApiService PATCHNotificationsNotificationId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var notificationId interface{}

		resp, httpRes, err := apiClient.NotificationsApi.PATCHNotificationsNotificationId(context.Background(), notificationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationsApiService POSTNotifications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.NotificationsApi.POSTNotifications(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
