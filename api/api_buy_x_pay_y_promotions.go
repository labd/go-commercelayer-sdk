/*
Commerce Layer API

Headless Commerce for Global Brands.

API version: 7.6.1
Contact: support@commercelayer.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// BuyXPayYPromotionsApiService BuyXPayYPromotionsApi service
type BuyXPayYPromotionsApiService service

type BuyXPayYPromotionsApiDELETEBuyXPayYPromotionsBuyXPayYPromotionIdRequest struct {
	ctx                 context.Context
	ApiService          *BuyXPayYPromotionsApiService
	buyXPayYPromotionId interface{}
}

func (r BuyXPayYPromotionsApiDELETEBuyXPayYPromotionsBuyXPayYPromotionIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DELETEBuyXPayYPromotionsBuyXPayYPromotionIdExecute(r)
}

/*
DELETEBuyXPayYPromotionsBuyXPayYPromotionId Delete a buy x pay y promotion

Delete a buy x pay y promotion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param buyXPayYPromotionId The resource's id
	@return BuyXPayYPromotionsApiDELETEBuyXPayYPromotionsBuyXPayYPromotionIdRequest
*/
func (a *BuyXPayYPromotionsApiService) DELETEBuyXPayYPromotionsBuyXPayYPromotionId(ctx context.Context, buyXPayYPromotionId interface{}) BuyXPayYPromotionsApiDELETEBuyXPayYPromotionsBuyXPayYPromotionIdRequest {
	return BuyXPayYPromotionsApiDELETEBuyXPayYPromotionsBuyXPayYPromotionIdRequest{
		ApiService:          a,
		ctx:                 ctx,
		buyXPayYPromotionId: buyXPayYPromotionId,
	}
}

// Execute executes the request
func (a *BuyXPayYPromotionsApiService) DELETEBuyXPayYPromotionsBuyXPayYPromotionIdExecute(r BuyXPayYPromotionsApiDELETEBuyXPayYPromotionsBuyXPayYPromotionIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuyXPayYPromotionsApiService.DELETEBuyXPayYPromotionsBuyXPayYPromotionId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/buy_x_pay_y_promotions/{buyXPayYPromotionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"buyXPayYPromotionId"+"}", url.PathEscape(parameterValueToString(r.buyXPayYPromotionId, "buyXPayYPromotionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type BuyXPayYPromotionsApiGETBuyXPayYPromotionsRequest struct {
	ctx        context.Context
	ApiService *BuyXPayYPromotionsApiService
}

func (r BuyXPayYPromotionsApiGETBuyXPayYPromotionsRequest) Execute() (*GETBuyXPayYPromotions200Response, *http.Response, error) {
	return r.ApiService.GETBuyXPayYPromotionsExecute(r)
}

/*
GETBuyXPayYPromotions List all buy x pay y promotions

List all buy x pay y promotions

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return BuyXPayYPromotionsApiGETBuyXPayYPromotionsRequest
*/
func (a *BuyXPayYPromotionsApiService) GETBuyXPayYPromotions(ctx context.Context) BuyXPayYPromotionsApiGETBuyXPayYPromotionsRequest {
	return BuyXPayYPromotionsApiGETBuyXPayYPromotionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return GETBuyXPayYPromotions200Response
func (a *BuyXPayYPromotionsApiService) GETBuyXPayYPromotionsExecute(r BuyXPayYPromotionsApiGETBuyXPayYPromotionsRequest) (*GETBuyXPayYPromotions200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GETBuyXPayYPromotions200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuyXPayYPromotionsApiService.GETBuyXPayYPromotions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/buy_x_pay_y_promotions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BuyXPayYPromotionsApiGETBuyXPayYPromotionsBuyXPayYPromotionIdRequest struct {
	ctx                 context.Context
	ApiService          *BuyXPayYPromotionsApiService
	buyXPayYPromotionId interface{}
}

func (r BuyXPayYPromotionsApiGETBuyXPayYPromotionsBuyXPayYPromotionIdRequest) Execute() (*GETBuyXPayYPromotionsBuyXPayYPromotionId200Response, *http.Response, error) {
	return r.ApiService.GETBuyXPayYPromotionsBuyXPayYPromotionIdExecute(r)
}

/*
GETBuyXPayYPromotionsBuyXPayYPromotionId Retrieve a buy x pay y promotion

Retrieve a buy x pay y promotion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param buyXPayYPromotionId The resource's id
	@return BuyXPayYPromotionsApiGETBuyXPayYPromotionsBuyXPayYPromotionIdRequest
*/
func (a *BuyXPayYPromotionsApiService) GETBuyXPayYPromotionsBuyXPayYPromotionId(ctx context.Context, buyXPayYPromotionId interface{}) BuyXPayYPromotionsApiGETBuyXPayYPromotionsBuyXPayYPromotionIdRequest {
	return BuyXPayYPromotionsApiGETBuyXPayYPromotionsBuyXPayYPromotionIdRequest{
		ApiService:          a,
		ctx:                 ctx,
		buyXPayYPromotionId: buyXPayYPromotionId,
	}
}

// Execute executes the request
//
//	@return GETBuyXPayYPromotionsBuyXPayYPromotionId200Response
func (a *BuyXPayYPromotionsApiService) GETBuyXPayYPromotionsBuyXPayYPromotionIdExecute(r BuyXPayYPromotionsApiGETBuyXPayYPromotionsBuyXPayYPromotionIdRequest) (*GETBuyXPayYPromotionsBuyXPayYPromotionId200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GETBuyXPayYPromotionsBuyXPayYPromotionId200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuyXPayYPromotionsApiService.GETBuyXPayYPromotionsBuyXPayYPromotionId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/buy_x_pay_y_promotions/{buyXPayYPromotionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"buyXPayYPromotionId"+"}", url.PathEscape(parameterValueToString(r.buyXPayYPromotionId, "buyXPayYPromotionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BuyXPayYPromotionsApiPATCHBuyXPayYPromotionsBuyXPayYPromotionIdRequest struct {
	ctx                     context.Context
	ApiService              *BuyXPayYPromotionsApiService
	buyXPayYPromotionUpdate *BuyXPayYPromotionUpdate
	buyXPayYPromotionId     interface{}
}

func (r BuyXPayYPromotionsApiPATCHBuyXPayYPromotionsBuyXPayYPromotionIdRequest) BuyXPayYPromotionUpdate(buyXPayYPromotionUpdate BuyXPayYPromotionUpdate) BuyXPayYPromotionsApiPATCHBuyXPayYPromotionsBuyXPayYPromotionIdRequest {
	r.buyXPayYPromotionUpdate = &buyXPayYPromotionUpdate
	return r
}

func (r BuyXPayYPromotionsApiPATCHBuyXPayYPromotionsBuyXPayYPromotionIdRequest) Execute() (*PATCHBuyXPayYPromotionsBuyXPayYPromotionId200Response, *http.Response, error) {
	return r.ApiService.PATCHBuyXPayYPromotionsBuyXPayYPromotionIdExecute(r)
}

/*
PATCHBuyXPayYPromotionsBuyXPayYPromotionId Update a buy x pay y promotion

Update a buy x pay y promotion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param buyXPayYPromotionId The resource's id
	@return BuyXPayYPromotionsApiPATCHBuyXPayYPromotionsBuyXPayYPromotionIdRequest
*/
func (a *BuyXPayYPromotionsApiService) PATCHBuyXPayYPromotionsBuyXPayYPromotionId(ctx context.Context, buyXPayYPromotionId interface{}) BuyXPayYPromotionsApiPATCHBuyXPayYPromotionsBuyXPayYPromotionIdRequest {
	return BuyXPayYPromotionsApiPATCHBuyXPayYPromotionsBuyXPayYPromotionIdRequest{
		ApiService:          a,
		ctx:                 ctx,
		buyXPayYPromotionId: buyXPayYPromotionId,
	}
}

// Execute executes the request
//
//	@return PATCHBuyXPayYPromotionsBuyXPayYPromotionId200Response
func (a *BuyXPayYPromotionsApiService) PATCHBuyXPayYPromotionsBuyXPayYPromotionIdExecute(r BuyXPayYPromotionsApiPATCHBuyXPayYPromotionsBuyXPayYPromotionIdRequest) (*PATCHBuyXPayYPromotionsBuyXPayYPromotionId200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PATCHBuyXPayYPromotionsBuyXPayYPromotionId200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuyXPayYPromotionsApiService.PATCHBuyXPayYPromotionsBuyXPayYPromotionId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/buy_x_pay_y_promotions/{buyXPayYPromotionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"buyXPayYPromotionId"+"}", url.PathEscape(parameterValueToString(r.buyXPayYPromotionId, "buyXPayYPromotionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.buyXPayYPromotionUpdate == nil {
		return localVarReturnValue, nil, reportError("buyXPayYPromotionUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.buyXPayYPromotionUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BuyXPayYPromotionsApiPOSTBuyXPayYPromotionsRequest struct {
	ctx                     context.Context
	ApiService              *BuyXPayYPromotionsApiService
	buyXPayYPromotionCreate *BuyXPayYPromotionCreate
}

func (r BuyXPayYPromotionsApiPOSTBuyXPayYPromotionsRequest) BuyXPayYPromotionCreate(buyXPayYPromotionCreate BuyXPayYPromotionCreate) BuyXPayYPromotionsApiPOSTBuyXPayYPromotionsRequest {
	r.buyXPayYPromotionCreate = &buyXPayYPromotionCreate
	return r
}

func (r BuyXPayYPromotionsApiPOSTBuyXPayYPromotionsRequest) Execute() (*POSTBuyXPayYPromotions201Response, *http.Response, error) {
	return r.ApiService.POSTBuyXPayYPromotionsExecute(r)
}

/*
POSTBuyXPayYPromotions Create a buy x pay y promotion

Create a buy x pay y promotion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return BuyXPayYPromotionsApiPOSTBuyXPayYPromotionsRequest
*/
func (a *BuyXPayYPromotionsApiService) POSTBuyXPayYPromotions(ctx context.Context) BuyXPayYPromotionsApiPOSTBuyXPayYPromotionsRequest {
	return BuyXPayYPromotionsApiPOSTBuyXPayYPromotionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return POSTBuyXPayYPromotions201Response
func (a *BuyXPayYPromotionsApiService) POSTBuyXPayYPromotionsExecute(r BuyXPayYPromotionsApiPOSTBuyXPayYPromotionsRequest) (*POSTBuyXPayYPromotions201Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *POSTBuyXPayYPromotions201Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuyXPayYPromotionsApiService.POSTBuyXPayYPromotions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/buy_x_pay_y_promotions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.buyXPayYPromotionCreate == nil {
		return localVarReturnValue, nil, reportError("buyXPayYPromotionCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.buyXPayYPromotionCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
