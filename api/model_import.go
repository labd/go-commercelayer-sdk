/*
Commerce Layer API

Headless Commerce for Global Brands.

API version: 7.6.1
Contact: support@commercelayer.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ModelImport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelImport{}

// ModelImport struct for ModelImport
type ModelImport struct {
	Data *ImportData `json:"data,omitempty"`
}

// NewModelImport instantiates a new ModelImport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelImport() *ModelImport {
	this := ModelImport{}
	return &this
}

// NewModelImportWithDefaults instantiates a new ModelImport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelImportWithDefaults() *ModelImport {
	this := ModelImport{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ModelImport) GetData() ImportData {
	if o == nil || IsNil(o.Data) {
		var ret ImportData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelImport) GetDataOk() (*ImportData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ModelImport) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given ImportData and assigns it to the Data field.
func (o *ModelImport) SetData(v ImportData) {
	o.Data = &v
}

func (o ModelImport) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelImport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableModelImport struct {
	value *ModelImport
	isSet bool
}

func (v NullableModelImport) Get() *ModelImport {
	return v.value
}

func (v *NullableModelImport) Set(val *ModelImport) {
	v.value = val
	v.isSet = true
}

func (v NullableModelImport) IsSet() bool {
	return v.isSet
}

func (v *NullableModelImport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelImport(val *ModelImport) *NullableModelImport {
	return &NullableModelImport{value: val, isSet: true}
}

func (v NullableModelImport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelImport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
