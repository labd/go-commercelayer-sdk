/*
Commerce Layer API

Headless Commerce for Global Brands.

API version: 7.6.1
Contact: support@commercelayer.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// OrderSubscriptionItemsApiService OrderSubscriptionItemsApi service
type OrderSubscriptionItemsApiService service

type OrderSubscriptionItemsApiDELETEOrderSubscriptionItemsOrderSubscriptionItemIdRequest struct {
	ctx                     context.Context
	ApiService              *OrderSubscriptionItemsApiService
	orderSubscriptionItemId interface{}
}

func (r OrderSubscriptionItemsApiDELETEOrderSubscriptionItemsOrderSubscriptionItemIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DELETEOrderSubscriptionItemsOrderSubscriptionItemIdExecute(r)
}

/*
DELETEOrderSubscriptionItemsOrderSubscriptionItemId Delete an order subscription item

Delete an order subscription item

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param orderSubscriptionItemId The resource's id
	@return OrderSubscriptionItemsApiDELETEOrderSubscriptionItemsOrderSubscriptionItemIdRequest
*/
func (a *OrderSubscriptionItemsApiService) DELETEOrderSubscriptionItemsOrderSubscriptionItemId(ctx context.Context, orderSubscriptionItemId interface{}) OrderSubscriptionItemsApiDELETEOrderSubscriptionItemsOrderSubscriptionItemIdRequest {
	return OrderSubscriptionItemsApiDELETEOrderSubscriptionItemsOrderSubscriptionItemIdRequest{
		ApiService:              a,
		ctx:                     ctx,
		orderSubscriptionItemId: orderSubscriptionItemId,
	}
}

// Execute executes the request
func (a *OrderSubscriptionItemsApiService) DELETEOrderSubscriptionItemsOrderSubscriptionItemIdExecute(r OrderSubscriptionItemsApiDELETEOrderSubscriptionItemsOrderSubscriptionItemIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderSubscriptionItemsApiService.DELETEOrderSubscriptionItemsOrderSubscriptionItemId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/order_subscription_items/{orderSubscriptionItemId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orderSubscriptionItemId"+"}", url.PathEscape(parameterValueToString(r.orderSubscriptionItemId, "orderSubscriptionItemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type OrderSubscriptionItemsApiGETOrderSubscriptionIdOrderSubscriptionItemsRequest struct {
	ctx                 context.Context
	ApiService          *OrderSubscriptionItemsApiService
	orderSubscriptionId interface{}
}

func (r OrderSubscriptionItemsApiGETOrderSubscriptionIdOrderSubscriptionItemsRequest) Execute() (*http.Response, error) {
	return r.ApiService.GETOrderSubscriptionIdOrderSubscriptionItemsExecute(r)
}

/*
GETOrderSubscriptionIdOrderSubscriptionItems Retrieve the order subscription items associated to the order subscription

Retrieve the order subscription items associated to the order subscription

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param orderSubscriptionId The resource's id
	@return OrderSubscriptionItemsApiGETOrderSubscriptionIdOrderSubscriptionItemsRequest
*/
func (a *OrderSubscriptionItemsApiService) GETOrderSubscriptionIdOrderSubscriptionItems(ctx context.Context, orderSubscriptionId interface{}) OrderSubscriptionItemsApiGETOrderSubscriptionIdOrderSubscriptionItemsRequest {
	return OrderSubscriptionItemsApiGETOrderSubscriptionIdOrderSubscriptionItemsRequest{
		ApiService:          a,
		ctx:                 ctx,
		orderSubscriptionId: orderSubscriptionId,
	}
}

// Execute executes the request
func (a *OrderSubscriptionItemsApiService) GETOrderSubscriptionIdOrderSubscriptionItemsExecute(r OrderSubscriptionItemsApiGETOrderSubscriptionIdOrderSubscriptionItemsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderSubscriptionItemsApiService.GETOrderSubscriptionIdOrderSubscriptionItems")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/order_subscriptions/{orderSubscriptionId}/order_subscription_items"
	localVarPath = strings.Replace(localVarPath, "{"+"orderSubscriptionId"+"}", url.PathEscape(parameterValueToString(r.orderSubscriptionId, "orderSubscriptionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type OrderSubscriptionItemsApiGETOrderSubscriptionItemsRequest struct {
	ctx        context.Context
	ApiService *OrderSubscriptionItemsApiService
}

func (r OrderSubscriptionItemsApiGETOrderSubscriptionItemsRequest) Execute() (*GETOrderSubscriptionItems200Response, *http.Response, error) {
	return r.ApiService.GETOrderSubscriptionItemsExecute(r)
}

/*
GETOrderSubscriptionItems List all order subscription items

List all order subscription items

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return OrderSubscriptionItemsApiGETOrderSubscriptionItemsRequest
*/
func (a *OrderSubscriptionItemsApiService) GETOrderSubscriptionItems(ctx context.Context) OrderSubscriptionItemsApiGETOrderSubscriptionItemsRequest {
	return OrderSubscriptionItemsApiGETOrderSubscriptionItemsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return GETOrderSubscriptionItems200Response
func (a *OrderSubscriptionItemsApiService) GETOrderSubscriptionItemsExecute(r OrderSubscriptionItemsApiGETOrderSubscriptionItemsRequest) (*GETOrderSubscriptionItems200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GETOrderSubscriptionItems200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderSubscriptionItemsApiService.GETOrderSubscriptionItems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/order_subscription_items"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type OrderSubscriptionItemsApiGETOrderSubscriptionItemsOrderSubscriptionItemIdRequest struct {
	ctx                     context.Context
	ApiService              *OrderSubscriptionItemsApiService
	orderSubscriptionItemId interface{}
}

func (r OrderSubscriptionItemsApiGETOrderSubscriptionItemsOrderSubscriptionItemIdRequest) Execute() (*GETOrderSubscriptionItemsOrderSubscriptionItemId200Response, *http.Response, error) {
	return r.ApiService.GETOrderSubscriptionItemsOrderSubscriptionItemIdExecute(r)
}

/*
GETOrderSubscriptionItemsOrderSubscriptionItemId Retrieve an order subscription item

Retrieve an order subscription item

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param orderSubscriptionItemId The resource's id
	@return OrderSubscriptionItemsApiGETOrderSubscriptionItemsOrderSubscriptionItemIdRequest
*/
func (a *OrderSubscriptionItemsApiService) GETOrderSubscriptionItemsOrderSubscriptionItemId(ctx context.Context, orderSubscriptionItemId interface{}) OrderSubscriptionItemsApiGETOrderSubscriptionItemsOrderSubscriptionItemIdRequest {
	return OrderSubscriptionItemsApiGETOrderSubscriptionItemsOrderSubscriptionItemIdRequest{
		ApiService:              a,
		ctx:                     ctx,
		orderSubscriptionItemId: orderSubscriptionItemId,
	}
}

// Execute executes the request
//
//	@return GETOrderSubscriptionItemsOrderSubscriptionItemId200Response
func (a *OrderSubscriptionItemsApiService) GETOrderSubscriptionItemsOrderSubscriptionItemIdExecute(r OrderSubscriptionItemsApiGETOrderSubscriptionItemsOrderSubscriptionItemIdRequest) (*GETOrderSubscriptionItemsOrderSubscriptionItemId200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GETOrderSubscriptionItemsOrderSubscriptionItemId200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderSubscriptionItemsApiService.GETOrderSubscriptionItemsOrderSubscriptionItemId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/order_subscription_items/{orderSubscriptionItemId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orderSubscriptionItemId"+"}", url.PathEscape(parameterValueToString(r.orderSubscriptionItemId, "orderSubscriptionItemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type OrderSubscriptionItemsApiPATCHOrderSubscriptionItemsOrderSubscriptionItemIdRequest struct {
	ctx                         context.Context
	ApiService                  *OrderSubscriptionItemsApiService
	orderSubscriptionItemUpdate *OrderSubscriptionItemUpdate
	orderSubscriptionItemId     interface{}
}

func (r OrderSubscriptionItemsApiPATCHOrderSubscriptionItemsOrderSubscriptionItemIdRequest) OrderSubscriptionItemUpdate(orderSubscriptionItemUpdate OrderSubscriptionItemUpdate) OrderSubscriptionItemsApiPATCHOrderSubscriptionItemsOrderSubscriptionItemIdRequest {
	r.orderSubscriptionItemUpdate = &orderSubscriptionItemUpdate
	return r
}

func (r OrderSubscriptionItemsApiPATCHOrderSubscriptionItemsOrderSubscriptionItemIdRequest) Execute() (*PATCHOrderSubscriptionItemsOrderSubscriptionItemId200Response, *http.Response, error) {
	return r.ApiService.PATCHOrderSubscriptionItemsOrderSubscriptionItemIdExecute(r)
}

/*
PATCHOrderSubscriptionItemsOrderSubscriptionItemId Update an order subscription item

Update an order subscription item

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param orderSubscriptionItemId The resource's id
	@return OrderSubscriptionItemsApiPATCHOrderSubscriptionItemsOrderSubscriptionItemIdRequest
*/
func (a *OrderSubscriptionItemsApiService) PATCHOrderSubscriptionItemsOrderSubscriptionItemId(ctx context.Context, orderSubscriptionItemId interface{}) OrderSubscriptionItemsApiPATCHOrderSubscriptionItemsOrderSubscriptionItemIdRequest {
	return OrderSubscriptionItemsApiPATCHOrderSubscriptionItemsOrderSubscriptionItemIdRequest{
		ApiService:              a,
		ctx:                     ctx,
		orderSubscriptionItemId: orderSubscriptionItemId,
	}
}

// Execute executes the request
//
//	@return PATCHOrderSubscriptionItemsOrderSubscriptionItemId200Response
func (a *OrderSubscriptionItemsApiService) PATCHOrderSubscriptionItemsOrderSubscriptionItemIdExecute(r OrderSubscriptionItemsApiPATCHOrderSubscriptionItemsOrderSubscriptionItemIdRequest) (*PATCHOrderSubscriptionItemsOrderSubscriptionItemId200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PATCHOrderSubscriptionItemsOrderSubscriptionItemId200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderSubscriptionItemsApiService.PATCHOrderSubscriptionItemsOrderSubscriptionItemId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/order_subscription_items/{orderSubscriptionItemId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orderSubscriptionItemId"+"}", url.PathEscape(parameterValueToString(r.orderSubscriptionItemId, "orderSubscriptionItemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.orderSubscriptionItemUpdate == nil {
		return localVarReturnValue, nil, reportError("orderSubscriptionItemUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.orderSubscriptionItemUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type OrderSubscriptionItemsApiPOSTOrderSubscriptionItemsRequest struct {
	ctx                         context.Context
	ApiService                  *OrderSubscriptionItemsApiService
	orderSubscriptionItemCreate *OrderSubscriptionItemCreate
}

func (r OrderSubscriptionItemsApiPOSTOrderSubscriptionItemsRequest) OrderSubscriptionItemCreate(orderSubscriptionItemCreate OrderSubscriptionItemCreate) OrderSubscriptionItemsApiPOSTOrderSubscriptionItemsRequest {
	r.orderSubscriptionItemCreate = &orderSubscriptionItemCreate
	return r
}

func (r OrderSubscriptionItemsApiPOSTOrderSubscriptionItemsRequest) Execute() (*POSTOrderSubscriptionItems201Response, *http.Response, error) {
	return r.ApiService.POSTOrderSubscriptionItemsExecute(r)
}

/*
POSTOrderSubscriptionItems Create an order subscription item

Create an order subscription item

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return OrderSubscriptionItemsApiPOSTOrderSubscriptionItemsRequest
*/
func (a *OrderSubscriptionItemsApiService) POSTOrderSubscriptionItems(ctx context.Context) OrderSubscriptionItemsApiPOSTOrderSubscriptionItemsRequest {
	return OrderSubscriptionItemsApiPOSTOrderSubscriptionItemsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return POSTOrderSubscriptionItems201Response
func (a *OrderSubscriptionItemsApiService) POSTOrderSubscriptionItemsExecute(r OrderSubscriptionItemsApiPOSTOrderSubscriptionItemsRequest) (*POSTOrderSubscriptionItems201Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *POSTOrderSubscriptionItems201Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderSubscriptionItemsApiService.POSTOrderSubscriptionItems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/order_subscription_items"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.orderSubscriptionItemCreate == nil {
		return localVarReturnValue, nil, reportError("orderSubscriptionItemCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.api+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.orderSubscriptionItemCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
