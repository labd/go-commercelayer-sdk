/*
Commerce Layer API

Headless Commerce for Global Brands.

API version: 7.6.1
Contact: support@commercelayer.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the PATCHStockTransfersStockTransferId200ResponseDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PATCHStockTransfersStockTransferId200ResponseDataAttributes{}

// PATCHStockTransfersStockTransferId200ResponseDataAttributes struct for PATCHStockTransfersStockTransferId200ResponseDataAttributes
type PATCHStockTransfersStockTransferId200ResponseDataAttributes struct {
	// Unique identifier for the stock transfer (numeric).
	Number interface{} `json:"number,omitempty"`
	// The code of the associated SKU.
	SkuCode interface{} `json:"sku_code,omitempty"`
	// The stock quantity to be transferred from the origin stock location to destination one. Updatable unless stock transfer is completed or cancelled and depending on origin stock availability.
	Quantity interface{} `json:"quantity,omitempty"`
	// Send this attribute if you want to mark this stock transfer as upcoming.
	Upcoming interface{} `json:"_upcoming,omitempty"`
	// Send this attribute if you want to put this stock transfer on hold.
	OnHold interface{} `json:"_on_hold,omitempty"`
	// Send this attribute if you want to start picking this stock transfer.
	Picking interface{} `json:"_picking,omitempty"`
	// Send this attribute if you want to mark this stock transfer as in transit.
	InTransit interface{} `json:"_in_transit,omitempty"`
	// Send this attribute if you want to complete this stock transfer.
	Complete interface{} `json:"_complete,omitempty"`
	// Send this attribute if you want to cancel this stock transfer.
	Cancel interface{} `json:"_cancel,omitempty"`
	// A string that you can use to add any external identifier to the resource. This can be useful for integrating the resource to an external system, like an ERP, a marketing tool, a CRM, or whatever.
	Reference interface{} `json:"reference,omitempty"`
	// Any identifier of the third party system that defines the reference code.
	ReferenceOrigin interface{} `json:"reference_origin,omitempty"`
	// Set of key-value pairs that you can attach to the resource. This can be useful for storing additional information about the resource in a structured format.
	Metadata interface{} `json:"metadata,omitempty"`
}

// NewPATCHStockTransfersStockTransferId200ResponseDataAttributes instantiates a new PATCHStockTransfersStockTransferId200ResponseDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPATCHStockTransfersStockTransferId200ResponseDataAttributes() *PATCHStockTransfersStockTransferId200ResponseDataAttributes {
	this := PATCHStockTransfersStockTransferId200ResponseDataAttributes{}
	return &this
}

// NewPATCHStockTransfersStockTransferId200ResponseDataAttributesWithDefaults instantiates a new PATCHStockTransfersStockTransferId200ResponseDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPATCHStockTransfersStockTransferId200ResponseDataAttributesWithDefaults() *PATCHStockTransfersStockTransferId200ResponseDataAttributes {
	this := PATCHStockTransfersStockTransferId200ResponseDataAttributes{}
	return &this
}

// GetNumber returns the Number field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) GetNumber() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) GetNumberOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Number) {
		return nil, false
	}
	return &o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) HasNumber() bool {
	if o != nil && IsNil(o.Number) {
		return true
	}

	return false
}

// SetNumber gets a reference to the given interface{} and assigns it to the Number field.
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) SetNumber(v interface{}) {
	o.Number = v
}

// GetSkuCode returns the SkuCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) GetSkuCode() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.SkuCode
}

// GetSkuCodeOk returns a tuple with the SkuCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) GetSkuCodeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.SkuCode) {
		return nil, false
	}
	return &o.SkuCode, true
}

// HasSkuCode returns a boolean if a field has been set.
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) HasSkuCode() bool {
	if o != nil && IsNil(o.SkuCode) {
		return true
	}

	return false
}

// SetSkuCode gets a reference to the given interface{} and assigns it to the SkuCode field.
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) SetSkuCode(v interface{}) {
	o.SkuCode = v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) GetQuantity() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) GetQuantityOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return &o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) HasQuantity() bool {
	if o != nil && IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given interface{} and assigns it to the Quantity field.
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) SetQuantity(v interface{}) {
	o.Quantity = v
}

// GetUpcoming returns the Upcoming field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) GetUpcoming() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Upcoming
}

// GetUpcomingOk returns a tuple with the Upcoming field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) GetUpcomingOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Upcoming) {
		return nil, false
	}
	return &o.Upcoming, true
}

// HasUpcoming returns a boolean if a field has been set.
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) HasUpcoming() bool {
	if o != nil && IsNil(o.Upcoming) {
		return true
	}

	return false
}

// SetUpcoming gets a reference to the given interface{} and assigns it to the Upcoming field.
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) SetUpcoming(v interface{}) {
	o.Upcoming = v
}

// GetOnHold returns the OnHold field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) GetOnHold() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.OnHold
}

// GetOnHoldOk returns a tuple with the OnHold field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) GetOnHoldOk() (*interface{}, bool) {
	if o == nil || IsNil(o.OnHold) {
		return nil, false
	}
	return &o.OnHold, true
}

// HasOnHold returns a boolean if a field has been set.
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) HasOnHold() bool {
	if o != nil && IsNil(o.OnHold) {
		return true
	}

	return false
}

// SetOnHold gets a reference to the given interface{} and assigns it to the OnHold field.
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) SetOnHold(v interface{}) {
	o.OnHold = v
}

// GetPicking returns the Picking field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) GetPicking() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Picking
}

// GetPickingOk returns a tuple with the Picking field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) GetPickingOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Picking) {
		return nil, false
	}
	return &o.Picking, true
}

// HasPicking returns a boolean if a field has been set.
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) HasPicking() bool {
	if o != nil && IsNil(o.Picking) {
		return true
	}

	return false
}

// SetPicking gets a reference to the given interface{} and assigns it to the Picking field.
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) SetPicking(v interface{}) {
	o.Picking = v
}

// GetInTransit returns the InTransit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) GetInTransit() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.InTransit
}

// GetInTransitOk returns a tuple with the InTransit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) GetInTransitOk() (*interface{}, bool) {
	if o == nil || IsNil(o.InTransit) {
		return nil, false
	}
	return &o.InTransit, true
}

// HasInTransit returns a boolean if a field has been set.
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) HasInTransit() bool {
	if o != nil && IsNil(o.InTransit) {
		return true
	}

	return false
}

// SetInTransit gets a reference to the given interface{} and assigns it to the InTransit field.
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) SetInTransit(v interface{}) {
	o.InTransit = v
}

// GetComplete returns the Complete field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) GetComplete() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Complete
}

// GetCompleteOk returns a tuple with the Complete field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) GetCompleteOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Complete) {
		return nil, false
	}
	return &o.Complete, true
}

// HasComplete returns a boolean if a field has been set.
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) HasComplete() bool {
	if o != nil && IsNil(o.Complete) {
		return true
	}

	return false
}

// SetComplete gets a reference to the given interface{} and assigns it to the Complete field.
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) SetComplete(v interface{}) {
	o.Complete = v
}

// GetCancel returns the Cancel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) GetCancel() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Cancel
}

// GetCancelOk returns a tuple with the Cancel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) GetCancelOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Cancel) {
		return nil, false
	}
	return &o.Cancel, true
}

// HasCancel returns a boolean if a field has been set.
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) HasCancel() bool {
	if o != nil && IsNil(o.Cancel) {
		return true
	}

	return false
}

// SetCancel gets a reference to the given interface{} and assigns it to the Cancel field.
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) SetCancel(v interface{}) {
	o.Cancel = v
}

// GetReference returns the Reference field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) GetReference() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) GetReferenceOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return &o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) HasReference() bool {
	if o != nil && IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given interface{} and assigns it to the Reference field.
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) SetReference(v interface{}) {
	o.Reference = v
}

// GetReferenceOrigin returns the ReferenceOrigin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) GetReferenceOrigin() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ReferenceOrigin
}

// GetReferenceOriginOk returns a tuple with the ReferenceOrigin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) GetReferenceOriginOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ReferenceOrigin) {
		return nil, false
	}
	return &o.ReferenceOrigin, true
}

// HasReferenceOrigin returns a boolean if a field has been set.
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) HasReferenceOrigin() bool {
	if o != nil && IsNil(o.ReferenceOrigin) {
		return true
	}

	return false
}

// SetReferenceOrigin gets a reference to the given interface{} and assigns it to the ReferenceOrigin field.
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) SetReferenceOrigin(v interface{}) {
	o.ReferenceOrigin = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) GetMetadata() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) GetMetadataOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return &o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) HasMetadata() bool {
	if o != nil && IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given interface{} and assigns it to the Metadata field.
func (o *PATCHStockTransfersStockTransferId200ResponseDataAttributes) SetMetadata(v interface{}) {
	o.Metadata = v
}

func (o PATCHStockTransfersStockTransferId200ResponseDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PATCHStockTransfersStockTransferId200ResponseDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Number != nil {
		toSerialize["number"] = o.Number
	}
	if o.SkuCode != nil {
		toSerialize["sku_code"] = o.SkuCode
	}
	if o.Quantity != nil {
		toSerialize["quantity"] = o.Quantity
	}
	if o.Upcoming != nil {
		toSerialize["_upcoming"] = o.Upcoming
	}
	if o.OnHold != nil {
		toSerialize["_on_hold"] = o.OnHold
	}
	if o.Picking != nil {
		toSerialize["_picking"] = o.Picking
	}
	if o.InTransit != nil {
		toSerialize["_in_transit"] = o.InTransit
	}
	if o.Complete != nil {
		toSerialize["_complete"] = o.Complete
	}
	if o.Cancel != nil {
		toSerialize["_cancel"] = o.Cancel
	}
	if o.Reference != nil {
		toSerialize["reference"] = o.Reference
	}
	if o.ReferenceOrigin != nil {
		toSerialize["reference_origin"] = o.ReferenceOrigin
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullablePATCHStockTransfersStockTransferId200ResponseDataAttributes struct {
	value *PATCHStockTransfersStockTransferId200ResponseDataAttributes
	isSet bool
}

func (v NullablePATCHStockTransfersStockTransferId200ResponseDataAttributes) Get() *PATCHStockTransfersStockTransferId200ResponseDataAttributes {
	return v.value
}

func (v *NullablePATCHStockTransfersStockTransferId200ResponseDataAttributes) Set(val *PATCHStockTransfersStockTransferId200ResponseDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullablePATCHStockTransfersStockTransferId200ResponseDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullablePATCHStockTransfersStockTransferId200ResponseDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePATCHStockTransfersStockTransferId200ResponseDataAttributes(val *PATCHStockTransfersStockTransferId200ResponseDataAttributes) *NullablePATCHStockTransfersStockTransferId200ResponseDataAttributes {
	return &NullablePATCHStockTransfersStockTransferId200ResponseDataAttributes{value: val, isSet: true}
}

func (v NullablePATCHStockTransfersStockTransferId200ResponseDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePATCHStockTransfersStockTransferId200ResponseDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
